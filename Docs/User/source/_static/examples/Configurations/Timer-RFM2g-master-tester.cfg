/*
 RFM2g master tester 
 CGalperti 10.11.2019

 - 1 thread, LinuxTimer timing 
 - RFM2g DataSource in master mode, counter taken from LinuxTimer
 - MDSWriter for test monitoring
*/

$RTApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {               DataSource = Timer Type = uint32 }                
                Time    = { Frequency = 1000 DataSource = Timer Type = int32 }
            }
            OutputSignals = {
                Counter = {               DataSource = DDB1  Type = uint32 }                
                Time =    {               DataSource = DDB1  Type = int32 }            
            }
        }
       
        +Rename1 = {
         Class = IOGAM
		 InputSignals = {
		 	Counter = 	{ DataSource = DDB1 Type = uint32 }

		 }
		 OutputSignals =
		 {
		    Counter2 = 	{ DataSource = DDB1 Type = int32 }
		 }
        } 
         
        +Rename2 = {
         Class = IOGAM
		 InputSignals = {
		 	Counter = 	{ DataSource = DDB1 Type = uint32 }

		 }
		 OutputSignals =
		 {
		    Counter3 = 	{ DataSource = DDB1 Type = int32 }
		 }
        } 
        
        +TestSignals1 = {
        	Class = HelperGAM1
        	        	
        	MdsTimeOffset = 0
        	MdsStartTime = -4495000
        	MdsStopTime = 3950000
        	
        	InputSignals = { 
        		Time  = 		{ DataSource = DDB1     Type = int32 }
        	}
        	OutputSignals = {
				realtime			= { DataSource = DDB1 Type = float32  NumberOfElements = 1   }   	
            	adc  				= { DataSource = DDB1 Type = int16    NumberOfElements = 192 }
				rfm_in      		= { DataSource = DDB1 Type = uint8    NumberOfElements = 664 }
				wavegen     		= { DataSource = DDB1 Type = float32  NumberOfElements = 62  }
				proc_in     		= { DataSource = DDB1 Type = float32  NumberOfElements = 3  }
				offsettimeforMDS	= { DataSource = DDB1 Type = int32 	  NumberOfElements = 1 }
		  		triggerforMDS 		= { DataSource = DDB1 Type = uint8    NumberOfElements = 1 }
                DOs 				= { DataSource = DDB1 Type = uint8    NumberOfElements = 4 }
                PWMduty 			= { DataSource = DDB1 Type = uint16   NumberOfElements = 8 } 
        	}
        }
        
        +LoggerBroker = {
		 Class = IOGAM
		 InputSignals = {
		 	//Counter = 		{ DataSource = DDB1 Type = uint32 }
		    //Counter2 = 		{ DataSource = DDB1 Type = int32 }
		    Counter3 = 		{ DataSource = DDB1 Type = int32 }		 	
		 	//Time    = 		{ DataSource = DDB1 Type = int32 }
		 	RFMdata1 =      { DataSource = DDB1 Type = int32 }
		 }
		 OutputSignals =
		 {
		    //Counter = 		{ DataSource = LoggerDataSource Type = uint32 }
		    //Counter2 = 		{ DataSource = LoggerDataSource Type = int32 }
		    Counter-toSlave = 		{ DataSource = LoggerDataSource Type = int32 }		 			    
		    //Time    = 		{ DataSource = LoggerDataSource Type = int32 }
		    Counter-fromSlave =      { DataSource = LoggerDataSource Type = int32 }
		 }
        } 
        
        +RFMOutputBroker = {
            Class = IOGAM
            InputSignals = {
		    	Counter2         = { 		DataSource = DDB1  Type = int32 }
            	Time             = { 		DataSource = DDB1  Type = int32 }
		        Counter3         = { 		DataSource = DDB1  Type = int32 }
		        adc  			 = { 		DataSource = DDB1  Type = int16  NumberOfElements = 192 }        
		    }
		    OutputSignals = {
		    	Counter         = { 					DataSource = RFM  Type = int32 }
            	Time            = { Frequency = 1		DataSource = RFM  Type = int32 }
		        OutputBuffer    = { 					DataSource = RFM  Type = uint8 NumberOfElements = 388 }		    
		    }        
        }       

        +RFMInputBroker = {
            Class = IOGAM
            InputSignals = {
		    	InputBuffer     = { 					DataSource = RFM  Type = uint8 NumberOfElements = 388 }
		    }
		    OutputSignals = {
		    	RFMdata1        = { 					DataSource = DDB1  Type = int32 }
		    	adcin =           {                     DataSource = DDB1 Type = int16 NumberOfElements = 192 }                          
		    	
		    }        
        }       
        
        +TimingSignalsBroker = {
         Class = IOGAM
         InputSignals = { 
         	Thread1_CycleTime    			= { DataSource = Timings Type = uint32 Alias = Run.Thread1_CycleTime }
         }
         OutputSignals = { 
         	Thread1_CycleTime    			= { DataSource = DDB1 Type = uint32 } //1       
         }
        }                   
    	
    	+StorageBroker1 = {
		 Class = IOGAM
		 InputSignals = {	  
		  //triggerforMDS = { DataSource = DDB1 Type = uint8 }
		  //offsettimeforMDS = { DataSource = DDB1 Type = int32 } 
          
		  Counter3						= { DataSource = DDB1 Type = int32  } // 1     
		  RFMdata1						= { DataSource = DDB1 Type = int32  } // 2     		       
	      Thread1_CycleTime 			= { DataSource = DDB1 Type = uint32 } // 10	 
		 		  
		 }
		 OutputSignals = {
		  //Trigger = { DataSource = MDSWriter Type = uint8 }
		  //Time = { DataSource = MDSWriter Type = int32 }
                    
		  Counter						= { DataSource = MDSWriter Type = int32  } // 1
		  RFMdata1						= { DataSource = MDSWriter Type = int32  } // 2     		       		            
	      cycletime			 			= { DataSource = MDSWriter Type = uint32 } // 10	   
		 }
		}
			
        
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
       	}        
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
                
        +Timings = {
            Class = TimingDataSource
        }
        
        +Timer = {
            //Class = LinuxTimer
            Class = LinuxTimer::TerminatorLinuxTimer
            SleepNature = "Busy"
            //SleepNature = "Default"
            //ExecutionMode = RealTimeThread
            ExecutionMode = IndependentThread
            CPUMask = 0x04
            //IncrementsPerCycle = 100 // If not defined it is taken from the configured Timer frequency
            //StartTime=-1.0 // If not set starttime is 0
            StopTime=4.0 // If not set runs indefinitely
            //StopTime=-0.999 // If not set runs indefinitely
            
            SkipTimer=0 // If 1 runs at maximum possible speed w/o using any timer at all 
            Signals = { 
                Counter = { Type = uint32 }
                Time = { Type = int32 }
            }
            +TermMessage1 = { Class=Message Destination=StateMachine Function=RUNCOMPLETE }
            //+TermMessage2 = { Class=Message Destination=RTApp Function=StopCurrentStateExecution }
        }
        
        +RFM = {
            Class = RFM2g
		    ExecutionMode = RealTimeThread //Optional. If not set ExecutionMode = IndependentThread. If ExecutionMode == IndependentThread a thread is spawned to generate the time events. ExecutionMode == RealTimeThread the time is generated in the context of the real-time thread.
            CPUMask = 0x8 //Optional and only relevant if ExecutionMode=IndependentThread
            Device = /dev/rfm2g0 // Mandatory, the Linux device handling the RFM card installed on the system
            ReadOffset = 64 // Mandatory, the offset in bytes of the read starting point in the RF memory
            WriteOffset = 500 // Mandatory, the offset in bytes of the write starting point in the RF memory
        
            UseDMA = 1 // Optional, if 1 data exchange will be performed using DMA, if 0 with programmed IO. Default = 0
            DMABufferAddress = 0x3aec00000 // Required if UseDMA=1, physical address (BEWARE, NOT VIRTUAL, i.e. coming from cat /proc/iomem) of the kernel reserved DMA memory buffer (see node (1))
            WaitDMA = 1 // Required if UseDMA=1, if 0 the DataSource launches DMA read/write transactions without waiting for them to be completed. If 1 it waits for them. (see node (2))
            DMABufferSize = 1024 // The DMA buffer size
            DMAThreshold = 32 // The DMA threshold after which DMA must be used (bytes)
                
            //Synchronizing = 0 // Optional, if 1 the DataSource synchronizes the calling thread using SPC synchronization protocol, if 0 it doesn't synchronize and only exchanges data. Default = 0
            //BasePeriod = 1e-4 // Required if Synchronizing=1, the base period of the RFM synchronization clock (coming from the RFM master mode)
            DownSampleFactor = 10 // Required if Synchronizing=1, the downsample factor for synchronization strobes
            StartTime = 0 // Required if Synchronizing=1, the start time at which the DataSource will begin to synchronize
        
            Master = 1 // Optional, if 1 the node is the RFM synchronizing node, i.e. sends the system time around the RFM ring. Default = 0
        
            //InputEnabled = 1  // To be implemented
            //Outputenabled = 1 // To be implemented
		
		    Signals = {
		        Counter         = { Type = int32 }
                //Time            = { Type = uint32 Frequency = 1000 }
                Time            = { Type = int32 }                
          		InputBuffer     = { Type = uint8  NumberOfElements = 388 }
		        OutputBuffer    = { Type = uint8  NumberOfElements = 388 }
            }
        }
        
        +MDSWriter = {
        	Class = MDSWriter
			NumberOfBuffers = 100000
        	CPUMask = 0x10
        	StackSize = 10000000
        	TreeName = "martetest"
        	//TreeName = "rtc2"
        	StoreOnTrigger = 0
        	Verbosity = 0
        
        	// New shot requested
        	//PulseNumber = -1 
        
        	// Undefined, OpenTree is deferred, it is performed in response to a specific message sent by the ShotManager
        	// this is necessary because we need a late opening to have simulink buses configured
        	// the shotno is the parameter of the opening message
        	//PulseNumber = -2 
          	
          	// Current shot
          	PulseNumber = 0
          	
          	//PulseNumber = 10
          	
        	EventName = "updatejScope"
        	TimeRefresh = 5
        	NumberOfPreTriggers = 1
			NumberOfPostTriggers = 1
		
			Signals = {
				//Trigger = { Type = uint8 }	
			    //Time    = { Type = int32 TimeSignal = 1 TimeSignalMultiplier = 1e-6 }
  
        		Counter   = { NodeName = "ST.CH01"  					Period = 0.001  MakeSegmentAfterNWrites = 100000 AutomaticSegmentation = 0 NumberOfElements = 1 SamplePhase = 0 } 				
        		RFMdata1  = { NodeName = "ST.CH02"  					Period = 0.001  MakeSegmentAfterNWrites = 100000 AutomaticSegmentation = 0 NumberOfElements = 1 SamplePhase = 0 } 				        		
        		cycletime = { NodeName = "ST.CH10"  					Period = 0.001  MakeSegmentAfterNWrites = 100000 AutomaticSegmentation = 0 NumberOfElements = 1 SamplePhase = 0 } 
        	}
        	+TreeFlushedMsg = { Class = Message Destination = ShotManager Function = TreeFlushed Mode = ExpectsReply }
        }                
                  
    }
    +States = {
        Class = ReferenceContainer
        +Run = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread CPUs = 0x2 
                    Functions = {
                     GAMTimer 
                     Rename1 
                     Rename2 
                     TestSignals1
                     RFMOutputBroker 
                     RFMInputBroker
                     TimingSignalsBroker
                     StorageBroker1
                     //LoggerBroker 
                    }
                }
            }
        }        
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
