+MDSLoadder = { 
   Class=SPCMDSLoader // Che eredita da ConfigurationDatabase e ReferenceContainer
   Shot = 53600
   +MDSSource = {
   		Class = SPCMDSSource // che eredita da ReferenceContainer
		Server = server1
		Tree = tree1	   
   		+ADCgains.Ain_gains = { Class=SCDclass_mdsparvector Path=\hybrid::mat_a_in_scale  }
   		+ADCgains.Ain_gains2 = { Class=SCDclass_mdsparvector Path=\hybrid::mat_a_in_scale2 }
	}
   +MDSSource = {
   		Class = SPCMDSSource
		Server = server2
		Tree = tree2	   
   		+ADCgains.DML_gains = { Class=SCDclass_mdsparscalartaridx Path=\DIAGZ::DML_VLOOP:DCL1COIL.gain Idx=1 Server=mdsserver2 Tree=Tree2 }
   }
}
/* SCDclass_mdsparvector ereditare da SCDclass_par e da MARTe::object
in questo modo MARTe su initialize chiama Inizialize di tutte la classi SCDconf,
nell'initialize si puo' gia' eseguire cdb.Read('Path') 
Setup viene fatto dopo Initialize 
SCDclass_par deve esporre un metodo setConnection in modo che si possa passare
il pointer all'oggettoi MDSplus::Tree e consentire di utilizzare la connessione.

SCDclass_par deve esporre anche in metodo setcdbcontainer in modo che
MDSLOader possa passare il cdb (se stesso) alle classi figlie di loading.

MDSSource eredita da ReferenceContainer e legge server e tree e apre la connessione
*/




$TestApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {                	
                    DataSource = Timer
                    Type = uint32
                }                
                Time = {          
                    Frequency = 1                     
                    DataSource = Timer
                    Type = uint32
                }
            }
            OutputSignals = {
                Counter = {                	
                    DataSource = DDB1
                    Type = uint32
                }                
                Time = {                	
                    DataSource = DDB1
                    Type = uint32
                }            
            }
        }
		+GAMSimulink = {
 			Class = SimulinkWrapperGAM
			Library = "/home/dt100/simulinkcodegen/SCD_rtccode_02_02.so"
			SymbolPrefix = "SCD_rtccode_02_02"
			MDSInterfacePath = MDSLoadder
			InputSignals = {
            	Counter = { DataSource = "DDB1" Type = uint32 Default = 0 }
 			}
 			OutputSignals = { 
           		Output1 = { DataSource = "DDB1" Type = uint64 }
			}		
		}
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
       	}        
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        
        /*
        +SysLogger = {
        	Class = SysLogger
        	Format = ItOoFm //Compulsory. As described in LoggerConsumerI::LoadPrintPreferences
    		//PrintKeys = 1 //Optional. As described in LoggerConsumerI::LoadPrintPreferences
    		Ident = myapp //Compulsory. Name of the syslog ident.
        }
        */
        
        +Timings = {
            Class = TimingDataSource
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = "Default"
            Signals = {
                Counter = { Type = uint32 }
                Time = { Type = uint32 }
            }
        }        
    }
    +States = {
        Class = ReferenceContainer
        +State1 = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread CPUs = 0x1 Functions = {GAMTimer GAMSimulink}
                }
            }
        }        
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
