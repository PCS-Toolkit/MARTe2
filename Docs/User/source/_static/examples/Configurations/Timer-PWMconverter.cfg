/*
 TCV SCD MARTe2 cfg file
 test PWM command converter GAM
 CGalperti 04.02.2020

 - 1 thread, Timer timing
 - PWM commands converter 
 - output to console 
 
*/


$RTApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer

        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {               DataSource = Timer Type = uint32 }                
                Time    = { Frequency = 1 DataSource = Timer Type = int32 }
            }
            OutputSignals = {
                Counter = {               DataSource = DDB1  Type = uint32 }                
                Time =    {               DataSource = DDB1  Type = int32 }            
            }
        }
                
        +Constants = {
        	Class = ConstantGAM
        	OutputSignals = {
				
				/*
				PWMcmd1 			= { DataSource = DDB1 Type = uint32   Default = {1048601600} } // IS 0 GP 1000 IC 0    OC 25 
                PWMcmd2 			= { DataSource = DDB1 Type = uint32   Default = {1048627200} } // IS 0 GP 1000 IC 0    OC 50 
                PWMcmd3 			= { DataSource = DDB1 Type = uint32   Default = {1048832000} } // IS 0 GP 1000 IC 0    OC 250  
                PWMcmd4 			= { DataSource = DDB1 Type = uint32   Default = {1049088000} } // IS 0 GP 1000 IC 0    OC 500 
                PWMcmd5 			= { DataSource = DDB1 Type = uint32   Default = {1049344000} } // IS 0 GP 1000 IC 0    OC 750
                PWMcmd6 			= { DataSource = DDB1 Type = uint32   Default = {1049548800} } // IS 0 GP 1000 IC 0    OC 950 
                PWMcmd7 			= { DataSource = DDB1 Type = uint32   Default = {1049574400} } // IS 0 GP 1000 IC 0    OC 975
                PWMcmd8 			= { DataSource = DDB1 Type = uint32   Default = {1049344250} } // IS 0 GP 1000 IC 750  OC 250
                */

				PWMcmd1 			= { DataSource = DDB1 Type = uint32   Default = {2097408000} } // IS 0 GP 2000 IC 0    OC 250 
                PWMcmd2 			= { DataSource = DDB1 Type = uint32   Default = {2097664000} } // IS 0 GP 2000 IC 0    OC 100 
                PWMcmd3 			= { DataSource = DDB1 Type = uint32   Default = {2097920000} } // IS 0 GP 2000 IC 0    OC 750  
                PWMcmd4 			= { DataSource = DDB1 Type = uint32   Default = {1049088000} } // IS 0 GP 1000 IC 0    OC 500 
                PWMcmd5 			= { DataSource = DDB1 Type = uint32   Default = {1049344000} } // IS 0 GP 1000 IC 0    OC 750
                PWMcmd6 			= { DataSource = DDB1 Type = uint32   Default = {1049548800} } // IS 0 GP 1000 IC 0    OC 950 
                PWMcmd7 			= { DataSource = DDB1 Type = uint32   Default = {1049574400} } // IS 0 GP 1000 IC 0    OC 975
                PWMcmd8 			= { DataSource = DDB1 Type = uint32   Default = {1049344250} } // IS 0 GP 1000 IC 750  OC 250
                                     
                PWMduty   = { DataSource = DDB1 Type = float32 NumberOfElements = 11 Default = { 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 } } // Duty cycles (0 .. 0.999)
                PWMphase  = { DataSource = DDB1 Type = float32 NumberOfElements = 11 }  // Phase delay (0 .. 0.50)
        	}
        }
        		
        +PWMcommands = {
         Class = SPCPWMConversionGAM
         GlobalPeriods = { 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000 } // Compulsory, PWM periods, see ACQ2106N02OUT DataSource
         InputSignals = {
          PWMduty   = { DataSource = DDB1 Type = float32 NumberOfElements = 11 }  // Duty cycles (0.0 .. 99.0)
          PWMphase  = { DataSource = DDB1 Type = float32 NumberOfElements = 11 }  // Phase delay (0.0 .. 50.0)
         }
         OutputSignals = {
          PWM_IS    = { DataSource = DDB1 Type = uint8 NumberOfElements = 11 }
          PWM_GP    = { DataSource = DDB1 Type = uint16 NumberOfElements = 11 }
          PWM_OC    = { DataSource = DDB1 Type = uint16 NumberOfElements = 11 }
          PWM_IC    = { DataSource = DDB1 Type = uint16 NumberOfElements = 11 }
          PWMcmdv    = { DataSource = DDB1 Type = uint32 NumberOfElements = 11 }   // PWM configuration buffer according to ACQ2106N02OUT DataSource
         }
        }
 		
 	 			
		+LoggerBroker = {
		 Class = IOGAM
		 InputSignals = {
          PWMduty   = { DataSource = DDB1 Type = float32 NumberOfElements = 11 }  // Duty cycles (0 .. 0.999)
          PWMphase  = { DataSource = DDB1 Type = float32 NumberOfElements = 11 }  // Phase delay (0 .. 0.50)
          PWM_IS    = { DataSource = DDB1 Type = uint8 NumberOfElements = 11 }
          PWM_GP    = { DataSource = DDB1 Type = uint16 NumberOfElements = 11 }
          PWM_OC    = { DataSource = DDB1 Type = uint16 NumberOfElements = 11 }
          PWM_IC    = { DataSource = DDB1 Type = uint16 NumberOfElements = 11 }
          PWMcmdv    = { DataSource = DDB1 Type = uint32 NumberOfElements = 11 }   // PWM configuration buffer according to ACQ2106N02OUT DataSource
		 }
		 OutputSignals =
		 {
          PWMduty   = { DataSource = LoggerDataSource Type = float32 NumberOfElements = 11 }  // Duty cycles (0 .. 0.999)
          PWMphase  = { DataSource = LoggerDataSource Type = float32 NumberOfElements = 11 }  // Phase delay (0 .. 0.50)
          PWM_IS    = { DataSource = LoggerDataSource Type = uint8 NumberOfElements = 11 }
          PWM_GP    = { DataSource = LoggerDataSource Type = uint16 NumberOfElements = 11 }
          PWM_OC    = { DataSource = LoggerDataSource Type = uint16 NumberOfElements = 11 }
          PWM_IC    = { DataSource = LoggerDataSource Type = uint16 NumberOfElements = 11 }
          PWMcmdv    = { DataSource = LoggerDataSource Type = uint32 NumberOfElements = 11 }   // PWM configuration buffer according to ACQ2106N02OUT DataSource
		 }
		} 
		
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        
        +DDB1 = {
            Class = GAMDataSource
       	}
       	
        +LoggerDataSource = {
            Class = LoggerDataSource
        }  
            
        +Timings = {
            Class = TimingDataSource
        }       
       
        +Timer = {
            Class = LinuxTimer
            //Class = LinuxTimer::TerminatorLinuxTimer
            SleepNature = "Busy"
            //SleepNature = "Default"
            //ExecutionMode = RealTimeThread
            ExecutionMode = IndependentThread
            CPUMask = 0x04
            //IncrementsPerCycle = 100 // If not defined it is taken from the configured Timer frequency
            //StartTime=-1.0 // If not set starttime is 0
            //StopTime=4.0 // If not set runs indefinitely
            //StopTime=-0.999 // If not set runs indefinitely
            
            SkipTimer=0 // If 1 runs at maximum possible speed w/o using any timer at all 
            Signals = { 
                Counter = { Type = uint32 }
                Time = { Type = int32 }
            }
            //+TermMessage1 = { Class=Message Destination=StateMachine Function=RUNCOMPLETE }
        }
       
                                      
    }
    +States = {
        Class = ReferenceContainer
        +Run = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread CPUs = 0x02 
                    Functions = {
                      	GAMTimer
                      	Constants
                      	PWMcommands
                      	LoggerBroker
                    }                                
                }
            }
        }               
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
