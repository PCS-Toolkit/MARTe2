/*
 ESDEtherCAT master tester 
 CGalperti 06.11.2019

 - 1 thread, LinuxTimer timing 
 - ESDEtherCATMaster 
 - MDSWriter for test monitoring
*/

$RTApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {               		DataSource = Timer Type = uint32 }                
                Time    = { Frequency = 100     	DataSource = Timer Type = int32 }
            }
            OutputSignals = {
                Counter = {               		DataSource = DDB1  Type = uint32 }                
                Time =    {               		DataSource = DDB1  Type = int32 }            
            }
        }
       
        +TestSignals1 = {
        	Class = HelperGAM1
        	        	
        	MdsTimeOffset = 0
        	MdsStartTime = -4495000
        	MdsStopTime = 3950000
        	
        	InputSignals = { 
        		Time  = 		{ DataSource = DDB1     Type = int32 }
        	}
        	OutputSignals = {
				realtime			= { DataSource = DDB1 Type = float32  NumberOfElements = 1   }   	
            	adc  				= { DataSource = DDB1 Type = int16    NumberOfElements = 192 }
				rfm_in_dummy      	= { DataSource = DDB1 Type = uint8    NumberOfElements = 664 }
				wavegen     		= { DataSource = DDB1 Type = float32  NumberOfElements = 62  }
				proc_in     		= { DataSource = DDB1 Type = float32  NumberOfElements = 3  }
				offsettimeforMDS	= { DataSource = DDB1 Type = int32 	  NumberOfElements = 1 }
		  		triggerforMDS 		= { DataSource = DDB1 Type = uint8    NumberOfElements = 1 }
                DOs 				= { DataSource = DDB1 Type = uint8    NumberOfElements = 4 }
                PWMduty 			= { DataSource = DDB1 Type = uint16   NumberOfElements = 8 } 
        	}
        }
        

                
        +TimingSignalsBroker = {
         Class = IOGAM
         InputSignals = { 
         	Thread1_CycleTime    			= { DataSource = Timings Type = uint32 Alias = Run.Thread1_CycleTime }
         }
         OutputSignals = { 
         	Thread1_CycleTime    			= { DataSource = DDB1 Type = uint32 } //1       
         }
        }                   
    	


    	+EtherCATInputBroker = {
    	 Class = IOGAM
    	 InputSignals = {
    	  Input1 = {  DataSource = ETHCAT1 Type = int16    }
          Input2 = {  DataSource = ETHCAT1 Type = float32  }
    	 }
    	 OutputSignals = {
    	  ETHCATInput1 = {  DataSource = DDB1 Type = int16    }
          ETHCATInput2 = {  DataSource = DDB1 Type = float32  }
    	 }
    	}
    	
    	
    	+EtherCATOutputBroker = {
    	 Class = IOGAM
    	 InputSignals = {
    	  Counter = {               		DataSource = DDB1  Type = uint32 }
    	  Counter2 = {               		DataSource = DDB1  Type = uint32 Alias = Counter }
    	  
    	  realtime = 	{                      DataSource = DDB1  Type = float32 }
    	  realtime2 =   {                      DataSource = DDB1  Type = float32 Alias = realtime }
    	  realtime3 =   {                      DataSource = DDB1  Type = float32 Alias = realtime }

    	 }
    	 OutputSignals = {
    	  Output1 = {                       DataSource = ETHCAT1 Type = int16 }
    	  Output2 = { 						DataSource = ETHCAT1 Type = int16 }
    	  Output6 = {                       DataSource = ETHCAT1 Type = int16 }
    	  Output7 = { 						DataSource = ETHCAT1 Type = int16 }
    	  
    	  
    	  Output3 = {                       DataSource = ETHCAT1 Type = float32 }
    	  Output4 = {                       DataSource = ETHCAT1 Type = float32 }    
    	  Output5 = {                       DataSource = ETHCAT1 Type = float32 }    
    	  	  
    	 }
    	}

        +LoggerBroker = {
		 Class = IOGAM
		 InputSignals = {
		 	//Counter = 		{ DataSource = DDB1 Type = uint32 }
    	    realtime = 		{ DataSource = DDB1  Type = float32 }
    	  	ETHCATInput1 = {  DataSource = DDB1 Type = int16    }
          	ETHCATInput2 = {  DataSource = DDB1 Type = float32  }
		 }
		 OutputSignals =
		 {
		    //ETHCATOutput1 = 		{ DataSource = LoggerDataSource Type = uint32 }
		    ETHCATOutput2 = 		{ DataSource = LoggerDataSource Type = float32 }
    	  	ETHCATInput1 = {  DataSource = LoggerDataSource Type = int16   }
          	ETHCATInput2 = {  DataSource = LoggerDataSource Type = float32  }		    
		 }
        } 
    	
    /*	
    	+StorageBroker1 = {
		 Class = IOGAM
		 InputSignals = {	  
		  //triggerforMDS = { DataSource = DDB1 Type = uint8 }
		  //offsettimeforMDS = { DataSource = DDB1 Type = int32 } 
          
		  Counter						= { DataSource = DDB1 Type = int32  } // 1     
	      Thread1_CycleTime 			= { DataSource = DDB1 Type = uint32 } // 10	 		  
		 }
		 OutputSignals = {
		  //Trigger = { DataSource = MDSWriter Type = uint8 }
		  //Time = { DataSource = MDSWriter Type = int32 }
                    
		  Counter						= { DataSource = MDSWriter Type = int32  } // 1		  RFMdata1						= { DataSource = MDSWriter Type = int32  } // 2     		       		            
	      cycletime			 			= { DataSource = MDSWriter Type = uint32 } // 10	   
		 }
		}
	*/	
		
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
       	}        
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
                
        +Timings = {
            Class = TimingDataSource
        }
        
        +Timer = {
            Class = LinuxTimer
            //Class = LinuxTimer::TerminatorLinuxTimer
            SleepNature = "Busy"
            //SleepNature = "Default"
            //ExecutionMode = RealTimeThread
            ExecutionMode = IndependentThread
            CPUMask = 0x04
            //IncrementsPerCycle = 100 // If not defined it is taken from the configured Timer frequency
            //StartTime=-1.0 // If not set starttime is 0
            //StopTime=4.0 // If not set runs indefinitely
            
            SkipTimer=0 // If 1 runs at maximum possible speed w/o using any timer at all 
            Signals = { 
                Counter = { Type = uint32 }
                Time = { Type = int32 }
            }
            //+TermMessage1 = { Class=Message Destination=StateMachine Function=RUNCOMPLETE }
            //+TermMessage2 = { Class=Message Destination=RTApp Function=StopCurrentStateExecution }
        }
        
        +ETHCAT1 = {
 	    	Class = ESDEtherCATMaster

 			//ENIcfgfile = "/home/dt100/ethercateni/EL6695-test1.xml" // The ENI (EtherCAT Network Information) xml file, see node (1)
 			//ENIcfgfile = "/home/dt100/ethercateni/EL6695-test2.xml" // The ENI (EtherCAT Network Information) xml file, see node (1)
 			ENIcfgfile = "/home/dt100/ethercateni/EL6695-testfull.xml" // The ENI (EtherCAT Network Information) xml file, see node (1)


 			ProcImageSize = 32000 // Size in bytes of the input and the output process images


      		PrintTOPDesc = 0 // Outputs top device and master descriptions to logger
      		PrintVersion = 0 // Outputs master version info to logger
      		PrintNICList = 0 // Outputs Network Interface Cards list to logger
      		PrintSlaveList = 0 // Outputs the list of configured slaves
      		PrintVarList = 0 // Outputs master process variable list to logger
      		PrintESCList = 0 // Outputs EtherCAT Slave Controller list info to logger


 			Signals = {
			/*
          		Input1 = { ENIName = "EL6695.IO Inputs.IN1" 	Type = uint32   Direction = Input }
          		Output1  = { ENIName = "EL6695.IO Outputs.OUT1"  Type = uint32   Direction = Output }
			*/

			/*
          		Input1 = { ENIName = "EL6695.IO Inputs.IN1" 	Type = uint32   Direction = Input }
          		Input2 = { ENIName = "EL6695.IO Inputs.IN2" 	Type = float32 Direction = Input }

          		Output1  = { ENIName = "EL6695.IO Outputs.OUT1"  Type = uint32   Direction = Output }
          		Output2  = { ENIName = "EL6695.IO Outputs.OUT2"  Type = float32   Direction = Output }
			*/

				Input1 = { ENIName = "EL6695.IO Inputs.IIN1" 	Type = int16 Direction = Input }
          		Input2 = { ENIName = "EL6695.IO Inputs.RIN1" 	Type = float32 Direction = Input }
          		

          		Output6  = { ENIName = "EL6695.IO Outputs.IOUT1"  Type = int16   Direction = Output }
          		Output7 = { ENIName = "EL6695.IO Outputs.IOUT2" 	Type = int16 Direction = Output }

          		Output1  = { ENIName = "EL6695.IO Outputs.IOUT18"  Type = int16   Direction = Output }
          		Output2 = { ENIName = "EL6695.IO Outputs.IOUT19" 	Type = int16 Direction = Output }
          		
          		Output3  = { ENIName = "EL6695.IO Outputs.ROUT1"  Type = float32   Direction = Output }
          		Output4 = { ENIName = "EL6695.IO Outputs.ROUT10" 	Type = float32 Direction = Output }
          		Output5 = { ENIName = "EL6695.IO Outputs.ROUT9" 	Type = float32 Direction = Output }


      		}
        }
     /*   
        +MDSWriter = {
        	Class = MDSWriter
			NumberOfBuffers = 100000
        	CPUMask = 0x10
        	StackSize = 10000000
        	TreeName = "martetest"
        	//TreeName = "rtc2"
        	StoreOnTrigger = 0
        	Verbosity = 0
        
        	// New shot requested
        	//PulseNumber = -1          	
          	// Current shot
          	PulseNumber = 0
            // Fixed shot
          	//PulseNumber = 10
          			
			Signals = {
				//Trigger = { Type = uint8 }	
			    //Time    = { Type = int32 TimeSignal = 1 TimeSignalMultiplier = 1e-6 }
  
        		Counter   = { NodeName = "ST.CH01"  					Period = 0.001  MakeSegmentAfterNWrites = 100000 AutomaticSegmentation = 0 NumberOfElements = 1 SamplePhase = 0 } 				
        		cycletime = { NodeName = "ST.CH10"  					Period = 0.001  MakeSegmentAfterNWrites = 100000 AutomaticSegmentation = 0 NumberOfElements = 1 SamplePhase = 0 } 
        	}
        	+TreeFlushedMsg = { Class = Message Destination = ShotManager Function = TreeFlushed Mode = ExpectsReply }
        }                
      */            
    }
    +States = {
        Class = ReferenceContainer
        +Run = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread CPUs = 0x2 
                    Functions = {
                     GAMTimer 
                     TestSignals1
                     TimingSignalsBroker
                     //StorageBroker1
                     EtherCATInputBroker
                     EtherCATOutputBroker
                     LoggerBroker 
                    }
                }
            }
        }        
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
