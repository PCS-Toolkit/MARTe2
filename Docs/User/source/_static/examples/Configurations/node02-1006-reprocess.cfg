/*
 TCV SCD MARTe2 cfg file
 node 02, expcode 1006
 reprocessing
 CGalperti 18.12.2019

 - 1 thread, AFHBA404 timing, transient auto termination 
 - state machine
 - TCP server for advancing state machine, ShotManager for sending status to MDS+ 
 - tunable parameters loading through MDSObjLoader
 - wavegen loading through MDSObjWavegen
 - previous ADC loading through MDSObjWavegen
 - MDS+ storage of algorithm outputs and timings
 - MDS+ simulink bus storage with names
 - DAC connected
 - Bus checkers inserted (under MDSTasks)

 CPUs allocation:
 1 0x01 System
 2 0x02 ADC polling
 3 0x04 RT Thread 1
 4 0x08 RT Thread 2
 5 0x10 RT Thread 3 
 6 0x20 MDS Writers
 
 Changelog:
 
 - 18.12.19 CG first written from 1005
*/

+ShotManager = {
 Class = SPCShotManager
 Server = tcvscd.crpp.tcv
 Tree = rtc_state
 Shot = 1
 Statusnode = MARTESTATE.TCVRT02
 AbortScript = "/root/generic/abort-ADC" 
 // The parameter param1 is the shotnumber to be opened 
 //+OpenTreeMsg1 = { Class = Message Destination = RTApp.Data.MDSWriter Function = OpenTree Mode = ExpectsReply +Parameters = { Class = ConfigurationDatabase param1 = 100000 } } 
 +OpenTreeMsg1 = { Class = Message Destination = RTApp.Data.MDSWriter Function = OpenTree Mode = ExpectsReply +Parameters = { Class = ConfigurationDatabase param1 = 0 } }
}

+TCPMessageProxy = {
    Class = TCPSocketMessageProxyExample
    Port = 24680
}

+LoggerService = {
      Class = LoggerService
      CPUs = 0x1 //Compulsory. The CPU mask where the asynchronous thread will run.
      StackSize = 32768 //Optional. The stack size of the asynchronous thread.
      NumberOfLogPages = 128 //Optional. The number of log pages.
	  +SysLogger = {
       Class = SysLogger
       Format = EFm //Compulsory. As described in LoggerConsumerI::LoadPrintPreferences
       PrintKeys = 0 //Optional. As described in LoggerConsumerI::LoadPrintPreferences
       Ident = SCDApp //Compulsory. Name of the syslog ident.
      }
      //+ConsoleLogger = {
      // Class = ConsoleLogger
      // //Format = ETtOofFRmC //Compulsory. As described in LoggerConsumerI::LoadPrintPreferences
      // Format = EFm //Compulsory. As described in LoggerConsumerI::LoadPrintPreferences
      // PrintKeys = 0 //Optional. As described in LoggerConsumerI::LoadPrintPreferences
      //}
      //+UDPLogger = {
      // Class = UDPLogger
      // Address = "127.0.0.1" //Compulsory. The address of the destination where the logs are to be sent to.
      // Port = 44444 //Compulsory. The port of the destination where the logs are to be sent to.
      // Format = EFm //Compulsory. As described in LoggerConsumerI::LoadPrintPreferences
      // PrintKeys = 0 //Optional. As described in LoggerConsumerI::LoadPrintPreferences
      //}
}

+StateMachine = {
 Class = StateMachine
 +INITIAL = {
  Class = ReferenceContainer
  +RUN = {
   Class = StateMachineEvent
   NextState = "RUN"
   NextStateError = "ERROR"
   Timeout = 0
   +ChangeToRunMsg               = { Class = Message Destination = RTApp     Function = PrepareNextState Mode = ExpectsReply +Parameters = { Class = ConfigurationDatabase param1 = Run } }
   +StartNextStateExecutionMsg   = { Class = Message Destination = RTApp     Function = StartNextStateExecution Mode = ExpectsReply }
   +ShotManagerStartMsg 	     = { Class = Message Destination = ShotManager Function = Run Mode = ExpectsReply }
  }
  +ERROR = {
   Class = StateMachineEvent
   NextState = "ERROR"
   NextStateError = "ERROR"
   Timeout = 0
   +ShotManagerErrorMsg 	     = { Class = Message Destination = ShotManager Function = Error Mode = ExpectsReply }  
  }
  +EXIT = {
   Class = StateMachineEvent
   NextState = "FINAL"
   NextStateError = "ERROR"
   Timeout = 0
   +ExitAppMsg = { Class = Message Destination = ShotManager     Function = Exit }   
  }
  +ABORT = {
   Class = StateMachineEvent
   NextState = "FINAL"
   NextStateError = "ERROR"
   Timeout = 0
   +ExitAppMsg = { Class = Message Destination = ShotManager     Function = Exit }   
  }
 }
 +RUN = {
  Class = ReferenceContainer
  +RUNCOMPLETE = {
   Class = StateMachineEvent
   NextState = "ENDRUN"
   NextStateError = "ERROR"
   Timeout = 0
   +StopCurrentStateExecutionMsg = { Class = Message Destination = RTApp     			Function = StopCurrentStateExecution Mode = ExpectsReply }
   +MdsFlushSegmentsMsg          = { Class = Message Destination = RTApp.Data.MDSWriter Function = FlushSegments Mode = ExpectsReply }
   +ShotManagerStopMsg 			 = { Class = Message Destination = ShotManager 			Function = Stop Mode = ExpectsReply }
  }
  +ABORT = {
   Class = StateMachineEvent
   NextState = "FINAL"
   NextStateError = "ERROR"
   Timeout = 0
   +StopLLCMsg					   = { Class = Message Destination = RTApp.Data.ADCSystem  Function = StopLLC Mode = ExpectsReply }
   +StopCurrentStateExecutionMsg = { Class = Message Destination = RTApp     			Function = StopCurrentStateExecution Mode = ExpectsReply }
   //+MdsFlushSegmentsMsg          = { Class = Message Destination = RTApp.Data.MDSWriter Function = FlushSegments Mode = ExpectsReply }  
   +ShotManagerAbortMsg 		 = { Class = Message Destination = ShotManager 			Function = Abort Mode = ExpectsReply }
  }
 }
 +ENDRUN = {
  Class = ReferenceContainer
  +ENTER = {
   Class = ReferenceContainer
   //+StopCurrentStateExecutionMsg = { Class = Message Destination = RTApp     Function = StopCurrentStateExecution Mode = ExpectsReply }   
   //+ShotManagerStopMsg 			 = { Class = Message Destination = ShotManager Function = Stop Mode = ExpectsReply }
  }
  +EXIT = {
   Class = StateMachineEvent
   NextState = "FINAL"
   NextStateError = "ERROR"
   Timeout = 0
   +ExitAppMsg = { Class = Message Destination = ShotManager     Function = Exit }   
  }
  +ABORT = {
   Class = StateMachineEvent
   NextState = "FINAL"
   NextStateError = "ERROR"
   Timeout = 0
   +ExitAppMsg = { Class = Message Destination = ShotManager     Function = Exit }   
  }
 } 
 +FINAL = {
  Class = ReferenceContainer
  +FINAL = {
   Class = StateMachineEvent
   NextState = "FINAL"
   NextStateError = "ERROR"
   Timeout = 0   
  } 
 }
 +ERROR = {
  Class = ReferenceContainer  
  +ENTER = {
   Class = ReferenceContainer
   +ShotManagerErrorMsg = { Class = Message Destination = ShotManager     Function = Error Mode = ExpectsReply }   
  }  
  +EXIT = {
   Class = StateMachineEvent
   NextState = "FINAL"
   NextStateError = "ERROR"
   Timeout = 0
   +ExitAppMsg = { Class = Message Destination = ShotManager     Function = Exit }   
  }
 }
}

+MDSParameters = {
 Class=MDSObjLoader
 Shot=65541
 +Connection_tcvdata_tcv_shot = {
  Class=MDSObjConnection
  Server=tcvdata.epfl.ch
  Tree=tcv_shot
  +SCDnode02_tp-ADCgains-Ain_gains                    = { Class=MDSParVector                   Path="\\hybrid::mat_a_in_scale"               }
  +SCDnode02_tp-ADCgains-DML_gain1                    = { Class=MDSParScalar                   Path="\\DIAGZ::DML_VLOOP:DCL1COIL.gain"       }
  +SCDnode02_tp-ADCgains-DML_gain2                    = { Class=MDSParScalar                   Path="\\DIAGZ::DML_VLOOP:DBRIPPLECOIL.gain"   }
  +SCDnode02_tp-ADCgains-DML_gain3                    = { Class=MDSParScalar                   Path="\\DIAGZ::DML_FLUX:CLCOIL.gain"          }
  +SCDnode02_tp-ADCgains-DML_gain4                    = { Class=MDSParScalar                   Path="\\DIAGZ::DML_FLUX:DML2AMPF.gain"        }
  +SCDnode02_tp-ADCgains-RVLOOP_gains                 = { Class=MDSParVector                   Path="\\MAGNETICS::RVLOOP.gain"               }
  +SCDnode02_tp-DACgains-OUT_scale_e_u                = { Class=MDSParScalar                   Path="\\hybrid::output_scales_e_u"            }
  +SCDnode02_tp-DACgains-OUT_scale_f_u                = { Class=MDSParScalar                   Path="\\hybrid::output_scales_f_u"            }
  +SCDnode02_tp-DACgains-OUT_scale_oh_u               = { Class=MDSParScalar                   Path="\\hybrid::output_scales_oh_u"           }
  +SCDnode02_tp-DACgains-OUT_scale_gas                = { Class=MDSParScalar                   Path="\\hybrid::output_scales_gas"            }
  +SCDnode02_tp-DACgains-OUT_scale_fast_u             = { Class=MDSParScalar                   Path="\\hybrid::output_scales_fast_u"         }
  +SCDnode02_tp-DACgains-OUT_scale_e_i                = { Class=MDSParScalar                   Path="\\hybrid::output_scales_e_i"            }
  +SCDnode02_tp-DACgains-OUT_scale_f_i                = { Class=MDSParScalar                   Path="\\hybrid::output_scales_f_i"            }
  +SCDalgo_02stddiag_tp-ADCpre-T_F_R                  = { Class=MDSParMatrix                   Path="\\MAGNETICS::VIRT.T_F_R"                }
  +SCDalgo_02stddiag_tp-ADCpre-t_start_bphi           = { Class=MDSParScalar                   Path="vdbget('powerdb::shot_design:bphi_start_ref')" }
  +SCDalgo_02stddiag_tp-ADCpre-t_start_bpol           = { Class=MDSParScalar                   Path="vdbget('powerdb::shot_design:pol_start_ref')" }
  +SCDalgo_02stddiag_tp-DMLpre-c_fix_tor_nonlin       = { Class=MDSParScalar                   Path="\\results::dmlbo002:c"                  }
  +SCDalgo_02stddiag_tp-DMLpre-c_fix_tor_diff         = { Class=MDSParScalar                   Path="\\results::dmlbo004:c"                  }
  +SCDalgo_02stddiag_tp-DMLpre-p_var_tor_ferro        = { Class=MDSParScalar                   Path="\\results::dmlbo005:p"                  }
  +SCDalgo_02stddiag_tp-DMLpre-c_fix_pol_lin          = { Class=MDSParVector                   Path="\\results::dmlbo006:c"                  }
  +SCDalgo_02stddiag_tp-DMLpre-c_fix_def              = { Class=MDSParVector                   Path="\\results::dmlbo007:c"                  }
  +SCDalgo_02stddiag_tp-DMLpre-c_fix_pol_vessel       = { Class=MDSParVector                   Path="\\results::dmlbo008:c"                  }
  +SCDalgo_hybrid_tp-A_matrix                         = { Class=MDSParMatrix                   Path="\\pcs::phys_mat_a"                      }
  +SCDalgo_hybrid_tp-M_matrix                         = { Class=MDSParMatrix                   Path="\\pcs::phys_mat_m"                      }
  +SCDalgo_hybrid_tp-G1_matrix                        = { Class=MDSPar3DMatrix                 Path="\\pcs::phys_mat_g1"                     }
  +SCDalgo_hybrid_tp-G2_matrix                        = { Class=MDSPar3DMatrix                 Path="\\pcs::phys_mat_g2"                     }
  +SCDalgo_hybrid_tp-G3_matrix                        = { Class=MDSPar3DMatrix                 Path="\\pcs::phys_mat_g3"                     }
  +SCDalgo_hybrid_tp-G_time                           = { Class=MDSParFixDimVector             Path="dim_of(\\pcs::phys_mat_addresses:G)"    Dim=50 }
  +SCDalgo_hybrid_tp-G_order                          = { Class=MDSParFixDimVectorInt          Path="\\pcs::phys_mat_addresses:G"            Dim=50 }
  +SCDalgo_hybrid_tp-WG_start_time                    = { Class=MDSParFixDimVectorIdx          Path="dim_of(\\\\draw_refs:ref_%03d)[0]"      StartIdx=1 StopIdx=24 }
  +SCDalgo_hybrid_tp-mgams-mvloop                     = { Class=MDSParScalarInt                Path="\\pcs::mgams.data:mvloop"               }
  +SCDalgo_hybrid_tp-mgams-ierat                      = { Class=MDSParScalarInt                Path="\\pcs::mgams.data:ierat"                }
  +SCDalgo_hybrid_tp-mgams-ikriz                      = { Class=MDSParScalarInt                Path="\\pcs::mgams.data:ikriz"                }
  +SCDalgo_hybrid_tp-mgams-inova                      = { Class=MDSParScalarInt                Path="\\pcs::mgams.data:inova"                }
  +SCDalgo_hybrid_tp-mgams-nfast                      = { Class=MDSParScalarInt                Path="\\pcs::mgams.data:nfast"                }
  +SCDalgo_hybrid_tp-ensignbits                       = { Class=MDSParScalarInt                Path=""                                       }
  +SCDalgo_hybrid_tp-endigdens1                       = { Class=MDSParScalarInt                Path=""                                       }
  +SCDalgo_signbits_tp-A_matrix                       = { Class=MDSParMatrix                   Path="\\pcs::phys_mat_a"                      }
  +SCDalgo_digdensityctrl1_tp-dneon                   = { Class=MDSParScalarInt                Path="\\pcs::mgams.data:dneon"                }
  +SCDalgo_digdensityctrl1_tp-dnekp                   = { Class=MDSParScalar                   Path="\\pcs::mgams.data:dnekp"                }
  +SCDalgo_digdensityctrl1_tp-dneki                   = { Class=MDSParScalar                   Path="\\pcs::mgams.data:dneki"                }
  +SCDalgo_digdensityctrl1_tp-dnekd                   = { Class=MDSParScalar                   Path="\\pcs::mgams.data:dnekd"                }
  +SCDalgo_digdensityctrl1_tp-dneka                   = { Class=MDSParScalar                   Path="\\pcs::mgams.data:dneka"                }
  +SCDalgo_digdensityctrl1_tp-dnefil                  = { Class=MDSParScalar                   Path="\\pcs::mgams.data:dnefil"               }
  +SCDalgo_digdensityctrl1_tp-dnemode                 = { Class=MDSParScalarInt                Path="\\pcs::mgams.data:dnemode"              }
  +SCDalgo_digdensityctrl1_tp-dnescal1                = { Class=MDSParScalar                   Path="\\pcs::mgams.data:dnescal1"             }
  +SCDalgo_digdensityctrl1_tp-dnescal2                = { Class=MDSParScalar                   Path="\\pcs::mgams.data:dnescal2"             }
  +SCDalgo_digdensityctrl1_tp-dne1mm                  = { Class=MDSParScalar                   Path=""                                       }
  +SCDalgo_digdensityctrl1_tp-dnetlh                  = { Class=MDSParScalar                   Path=""                                       }
 }
}

+MDSTasks = {
 Class=MDSObjLoader
 Shot=65541
 +Connection_scd_rtc = {
  Class=MDSObjConnection
  Server=tcvscd.crpp.tcv
  Tree=rtc
  +ADC02bus_checker                                   = { Class=MDSParBusChecker               Path="\\top.crpprt02.cabling.adc"            NElems = 192 Against = "ctlint:bpol_avg_001           ctlint:bpol_avg_002           ctlint:bpol_avg_003           ctlint:bpol_avg_004           ctlint:bpol_avg_005           ctlint:bpol_avg_006           ctlint:bpol_avg_007           ctlint:bpol_avg_008           ctlint:bpol_avg_009           ctlint:bpol_avg_010           ctlint:bpol_avg_011           ctlint:bpol_avg_012           ctlint:bpol_avg_013           ctlint:bpol_avg_014           ctlint:bpol_avg_015           ctlamp:iphi_001               ctlint:rvloop_002             ctlint:rvloop_003             ctlint:rvloop_004             ctlint:rvloop_005             ctlint:rvloop_006             ctlint:rvloop_007             ctlint:rvloop_008             ctlint:rvloop_009             ctlint:rvloop_010             ctlint:rvloop_011             ctlint:rvloop_012             ctlint:rvloop_013             ctlint:rvloop_014             ctlint:rvloop_015             ctlint:rvloop_016             ctlint:rvloop_017             ctlamp:ipol_E_001             ctlamp:ipol_E_002             ctlamp:ipol_E_003             ctlamp:ipol_E_004             ctlamp:ipol_E_005             ctlamp:ipol_E_006             ctlamp:ipol_E_007             ctlamp:ipol_E_008             ctlamp:ipol_F_001             ctlamp:ipol_F_002             ctlamp:ipol_F_003             ctlamp:ipol_F_004             ctlamp:ipol_F_005             ctlamp:ipol_F_006             ctlamp:ipol_F_007             ctlamp:ipol_F_008             ctlint:bpol_avg_017           ctlint:bpol_avg_018           ctlint:bpol_avg_019           ctlint:bpol_avg_020           ctlint:bpol_avg_021           ctlint:bpol_avg_022           ctlint:bpol_avg_023           ctlint:bpol_avg_024           ctlint:bpol_avg_025           ctlint:bpol_avg_026           ctlint:bpol_avg_027           ctlint:bpol_avg_028           ctlint:bpol_avg_029           ctlint:bpol_avg_030           ctlint:bpol_avg_031           ctlint:vloop_001              ctlint:rvloop_018             ctlint:rvloop_019             ctlint:rvloop_020             ctlint:rvloop_021             ctlint:rvloop_022             ctlint:rvloop_023             ctlint:rvloop_024             ctlint:rvloop_025             ctlint:rvloop_026             ctlint:rvloop_027             ctlint:rvloop_028             ctlint:rvloop_029             ctlint:rvloop_030             ctlint:rvloop_031             ctlint:rvloop_032             ctlint:rvloop_033             ctlint:bpol_avg_033           ctlint:bpol_avg_034           ctlint:bpol_avg_035           ctlint:bpol_avg_036           ctlint:bpol_avg_037           fir_fringe                    ctlint:rvloop_034             ctlint:rvloop_035             ctlint:rvloop_036             ctlint:rvloop_037             ctlint:rvloop_038             ctlamp:ipol_OH_001            ctlamp:ipol_OH_002            ctlamp:vloop_001              ctlamp:bpol_avg_002           ctlamp:ipol_G_001             ctlamp:bpol_avg_003           ctlamp:bpol_avg_004           ctlamp:bpol_avg_005           ctlamp:bpol_avg_006           ctlamp:bpol_avg_008           ctlamp:bpol_avg_011           ctlamp:bpol_avg_017           ctlamp:bpol_avg_018           ctlamp:bpol_avg_019           ctlamp:bpol_avg_021           ctlamp:bpol_avg_022           ctlamp:bpol_avg_023           ctlamp:bpol_avg_029           ctlamp:bpol_avg_032           ctlamp:bpol_avg_034           ctlamp:bpol_avg_035           ctlamp:bpol_avg_036           ctlamp:bpol_avg_037           ctlint:bpol_avg_016           ctlint:bpol_avg_032           ctlint:bpol_avg_038           1mm_fringe                    ctlamp:bpol_avg_038           ctlamp:ipol_DOH_001           ctlamp:rvloop_034             ctlamp:rvloop_035             ctlamp:rvloop_036             ctlamp:rvloop_037             ctlamp:rvloop_038                                                                                                       ctlamp:rvloop_002             ctlamp:rvloop_003             ctlamp:rvloop_004             ctlamp:rvloop_005             ctlamp:rvloop_006             ctlamp:rvloop_007             ctlamp:rvloop_008             ctlamp:rvloop_009             ctlamp:rvloop_010             ctlamp:rvloop_011             ctlamp:rvloop_012             ctlamp:rvloop_013             ctlamp:rvloop_014             ctlamp:rvloop_015             ctlamp:rvloop_016             ctlamp:rvloop_017             ctlamp:rvloop_018             ctlamp:rvloop_019             ctlamp:rvloop_020             ctlamp:rvloop_021             ctlamp:rvloop_022             ctlamp:rvloop_023             ctlamp:rvloop_024             ctlamp:rvloop_025             ctlamp:rvloop_026             ctlamp:rvloop_027             ctlamp:rvloop_028             ctlamp:rvloop_029             ctlamp:rvloop_030             ctlamp:rvloop_031             ctlamp:rvloop_032             ctlamp:rvloop_033             pd_001                        pd_002                        pd_003                        pd_004                        pd_005                        pd_006                        pd_007                        pd_008                        pd_009                        pd_010                        pd_011                        pd_012                        vloop:dc1coil                 vloop:dbripplecoil            flux:clcoil                   flux:dml2ampf                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 " }
  
 }
 +Connection_tcvdata_tcv_shot = {
  Class=MDSObjConnection
  Server=tcvdata.epfl.ch
  Tree=tcv_shot
  +ADC02PHYbus_checker                                = { Class=MDSParBusChecker               Path="\\pcs::phys_mat_a_inputs"              NElems = 120 Against = "CTLINT:VLOOP_001   CTLINT:RVLOOP_002  CTLINT:RVLOOP_003  CTLINT:RVLOOP_004  CTLINT:RVLOOP_005  CTLINT:RVLOOP_006  CTLINT:RVLOOP_007  CTLINT:RVLOOP_008  CTLINT:RVLOOP_009  CTLINT:RVLOOP_010  CTLINT:RVLOOP_011  CTLINT:RVLOOP_012  CTLINT:RVLOOP_013  CTLINT:RVLOOP_014  CTLINT:RVLOOP_015  CTLINT:RVLOOP_016  CTLINT:RVLOOP_017  CTLINT:RVLOOP_018  CTLINT:RVLOOP_019  CTLINT:RVLOOP_020  CTLINT:RVLOOP_021  CTLINT:RVLOOP_022  CTLINT:RVLOOP_023  CTLINT:RVLOOP_024  CTLINT:RVLOOP_025  CTLINT:RVLOOP_026  CTLINT:RVLOOP_027  CTLINT:RVLOOP_028  CTLINT:RVLOOP_029  CTLINT:RVLOOP_030  CTLINT:RVLOOP_031  CTLINT:RVLOOP_032  CTLINT:RVLOOP_033  CTLINT:RVLOOP_034  CTLINT:RVLOOP_035  CTLINT:RVLOOP_036  CTLINT:RVLOOP_037  CTLINT:RVLOOP_038  CTLINT:BPOL_AVG_001CTLINT:BPOL_AVG_002CTLINT:BPOL_AVG_003CTLINT:BPOL_AVG_004CTLINT:BPOL_AVG_005CTLINT:BPOL_AVG_006CTLINT:BPOL_AVG_007CTLINT:BPOL_AVG_008CTLINT:BPOL_AVG_009CTLINT:BPOL_AVG_010CTLINT:BPOL_AVG_011CTLINT:BPOL_AVG_012CTLINT:BPOL_AVG_013CTLINT:BPOL_AVG_014CTLINT:BPOL_AVG_015CTLINT:BPOL_AVG_016CTLINT:BPOL_AVG_017CTLINT:BPOL_AVG_018CTLINT:BPOL_AVG_019CTLINT:BPOL_AVG_020CTLINT:BPOL_AVG_021CTLINT:BPOL_AVG_022CTLINT:BPOL_AVG_023CTLINT:BPOL_AVG_024CTLINT:BPOL_AVG_025CTLINT:BPOL_AVG_026CTLINT:BPOL_AVG_027CTLINT:BPOL_AVG_028CTLINT:BPOL_AVG_029CTLINT:BPOL_AVG_030CTLINT:BPOL_AVG_031CTLINT:BPOL_AVG_032CTLINT:BPOL_AVG_033CTLINT:BPOL_AVG_034CTLINT:BPOL_AVG_035CTLINT:BPOL_AVG_036CTLINT:BPOL_AVG_037CTLINT:BPOL_AVG_038CTLAMP:IPOL_E_001  CTLAMP:IPOL_E_002  CTLAMP:IPOL_E_003  CTLAMP:IPOL_E_004  CTLAMP:IPOL_E_005  CTLAMP:IPOL_E_006  CTLAMP:IPOL_E_007  CTLAMP:IPOL_E_008  CTLAMP:IPOL_F_001  CTLAMP:IPOL_F_002  CTLAMP:IPOL_F_003  CTLAMP:IPOL_F_004  CTLAMP:IPOL_F_005  CTLAMP:IPOL_F_006  CTLAMP:IPOL_F_007  CTLAMP:IPOL_F_008  CTLAMP:IPOL_OH_001 CTLAMP:IPOL_OH_002 CTLAMP:BPOL_AVG_002CTLAMP:BPOL_AVG_003CTLAMP:BPOL_AVG_004CTLAMP:BPOL_AVG_005CTLAMP:BPOL_AVG_006CTLAMP:BPOL_AVG_008CTLAMP:BPOL_AVG_011CTLAMP:BPOL_AVG_017CTLAMP:BPOL_AVG_018CTLAMP:BPOL_AVG_019CTLAMP:BPOL_AVG_021CTLAMP:BPOL_AVG_022CTLAMP:BPOL_AVG_023CTLAMP:BPOL_AVG_029CTLAMP:BPOL_AVG_032CTLAMP:BPOL_AVG_034CTLAMP:BPOL_AVG_035CTLAMP:BPOL_AVG_036CTLAMP:BPOL_AVG_037CTLAMP:BPOL_AVG_038CTLAMP:IPOL_DOH_001FIR_FRINGE         CTLAMP:IPOL_G_001  1MM_FRINGE         CTLAMP:VLOOP_001   CTLAMP:IPHI_001    " }
 }
}

$RTApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
           
        +ADCBroker = {
            Class = IOGAM
            InputSignals = {
                Counter      = {                   DataSource = ADCSystem Type = int32 }                
                Time         = { Frequency = 10000 DataSource = ADCSystem Type = int32 }
            	ADCuscounter = {                   DataSource = ADCSystem Type = uint32 }
                ADCinputs    = {                   DataSource = ADCSystem Type = int16 NumberOfElements = 192 NumberOfDimensions = 1 }
            }
            OutputSignals = {
                Counter      = {                   DataSource = DDB1  Type = int32 Default = 0 }                
                Time         = {                   DataSource = DDB1  Type = int32 Default = 0 }      
                ADCuscounter = {                   DataSource = DDB1  Type = uint32 Default = 0 }
                realadc      = {                   DataSource = DDB1  Type = int16 NumberOfElements = 192  NumberOfDimensions = 1 }   
            }
        }       
        
        +TestSignals1 = {
        	Class = HelperGAM1
        	        	
        	MdsTimeOffset = 0
        	MdsStartTime = -4495000
        	MdsStopTime = 3950000
        	
        	InputSignals = { 
        		Time  = 		{ DataSource = DDB1     Type = int32 }
        	}
        	OutputSignals = {
				realtime			= { DataSource = DDB1 Type = float32  NumberOfElements = 1    }   	
            	adc  				= { DataSource = DDB1 Type = int16    NumberOfElements = 192  NumberOfDimensions = 1 }
				rfm_in_dummy      	= { DataSource = DDB1 Type = uint8    NumberOfElements = 984  NumberOfDimensions = 1 }
				wavegen     		= { DataSource = DDB1 Type = float32  NumberOfElements = 62   NumberOfDimensions = 1 }
				proc_in     		= { DataSource = DDB1 Type = float32  NumberOfElements = 3    NumberOfDimensions = 1 }
				offsettimeforMDS	= { DataSource = DDB1 Type = int32 	  NumberOfElements = 1    }
		  		triggerforMDS 		= { DataSource = DDB1 Type = uint8    NumberOfElements = 1    }
                DOs 				= { DataSource = DDB1 Type = uint8    NumberOfElements = 4    NumberOfDimensions = 1 }
                PWMduty 			= { DataSource = DDB1 Type = uint16   NumberOfElements = 8    NumberOfDimensions = 1 }  
        	}
        }

        +Dummy1 = {
        	Class = IOGAM
        	InputSignals = {
        		rfm_in_dummy       = { DataSource = DDB1 Type = uint8    NumberOfElements = 984 Ranges = {{0,11}} }
  			    rfm_in_dummy2      = { DataSource = DDB1 Type = uint8    NumberOfElements = 984 Ranges = {{0,79}}  Alias = rfm_in_dummy }      	
        	}
        	OutputSignals = {
        	    proc_in_dummy      = { DataSource = DDB1 Type = float32 NumberOfelements = 3 }
        	    ethcat1_in_dummy   = { DataSource = DDB1 Type = uint8 NumberOfelements = 80 }
        	}
        }
       
        +WavegenTimeBroker1 = {
         Class = IOGAM
         InputSignals = { Time = { DataSource = DDB1 Type = int32 } }
         OutputSignals = { time = { DataSource = MDSWavegen_WG0202bus Type = int32 } }
        }                   
        +WavegenBroker1 = {
         Class = IOGAM
         InputSignals = {
           wavegen_WG0202bus = { DataSource = MDSWavegen_WG0202bus Type = float32 NumberOfElements = 62}
         }
         OutputSignals = {
           realwavegen = { DataSource = DDB1 Type = float32 NumberOfElements = 62 }
         }
        }
        
        +WavegenTimeBroker2 = {
         Class = IOGAM
         InputSignals = { Time = { DataSource = DDB1 Type = int32 } }
         OutputSignals = { time = { DataSource = MDSWavegen_ADC02bus Type = int32 } }
        }                   
        +WavegenBroker2 = {
         Class = IOGAM
         InputSignals = {
           wavegen_ADC02bus = { DataSource = MDSWavegen_ADC02bus Type = int16 NumberOfElements = 192}
         }
         OutputSignals = {
           wavegenadc = { DataSource = DDB1 Type = int16 NumberOfElements = 192  }
         }
        }
            
		+GAMSimulink = {
 			Class = SimulinkWrapperGAM 			
			Library = "/home/dt100/simulinkcodegen/1006/SCD_rtccode_02_02.so"
			SymbolPrefix = "SCD_rtccode_02_02"
			Verbosity = 2
			TunParSourceGAM = MDSParameters
			//SkipNotOkTunParams = 0
			SkipNotOkTunParams = 1			
			InputSignals = {		
				realtime	= { DataSource = DDB1 Type = float32  NumberOfElements = 1   CheckSimulinkType = true  NumberOfDimensions=1 }
            	adc  		= { DataSource = DDB1 Type = int16    NumberOfElements = 192 CheckSimulinkType = true  NumberOfDimensions=1 Alias = wavegenadc }
				rfm_in      = { DataSource = DDB1 Type = uint8    NumberOfElements = 984 CheckSimulinkType = false NumberOfDimensions=1 Alias = rfm_in_dummy }
				wavegen     = { DataSource = DDB1 Type = float32  NumberOfElements = 62  CheckSimulinkType = true  NumberOfDimensions=1 Alias = realwavegen }
				proc_in     = { DataSource = DDB1 Type = float32    NumberOfElements = 3 CheckSimulinkType = false NumberOfDimensions=1 Alias = proc_in_dummy }
 				ethcat1_in  = { DataSource = DDB1 Type = uint8    NumberOfElements = 80  CheckSimulinkType = false NumberOfDimensions=1 Alias = ethcat1_in_dummy }			
 			}
 			OutputSignals = { 
				dac			= { DataSource = DDB1 Type = int16    NumberOfElements = 64  CheckSimulinkType = true  NumberOfDimensions=1 }		
				mem         = { DataSource = DDB1 Type = uint8    NumberOfElements = 1008  CheckSimulinkType = false  NumberOfDimensions=1 }				
				DO          = { DataSource = DDB1 Type = uint8    NumberOfElements = 4   CheckSimulinkType = true  NumberOfDimensions=1 }
				rfm_out     = { DataSource = DDB1 Type = uint8    NumberOfElements = 640 CheckSimulinkType = false NumberOfDimensions=1 }
				proc_out    = { DataSource = DDB1 Type = float32    NumberOfElements = 1   CheckSimulinkType = false NumberOfDimensions=1 }
 				ethcat1_out = { DataSource = DDB1 Type = uint8    NumberOfElements = 80   CheckSimulinkType = false NumberOfDimensions=1 }			
			}
			+SimulinkReadyMsg = { Class = Message Destination = RTApp.Data.MDSWriter Function = SetupBusSignals Mode = ExpectsReply +Parameters = { Class = ConfigurationDatabase param1 = RTApp.Functions.GAMSimulink } }			
		}
	
				   
    	+TimingSignalsBroker = {
         Class = IOGAM
         InputSignals = { 
         	Thread1_CycleTime    			= { DataSource = Timings Type = uint32 Alias = Run.Thread1_CycleTime } 
	        
	        ADCBroker_ReadTime    			= { DataSource = Timings Type = uint32 Default = 0 } 	        
	        ADCBroker_ExecTime    			= { DataSource = Timings Type = uint32 Default = 0 } 
	        ADCBroker_WriteTime    			= { DataSource = Timings Type = uint32 Default = 0 }    
	        WavegenTimeBroker1_ReadTime   	= { DataSource = Timings Type = uint32 Default = 0 } 
	        WavegenTimeBroker1_ExecTime   	= { DataSource = Timings Type = uint32 Default = 0 } 
	        WavegenTimeBroker1_WriteTime  	= { DataSource = Timings Type = uint32 Default = 0 } 
	        WavegenTimeBroker2_ReadTime 	= { DataSource = Timings Type = uint32 Default = 0 } 	
	        WavegenTimeBroker2_ExecTime 	= { DataSource = Timings Type = uint32 Default = 0 } 
	        WavegenTimeBroker2_WriteTime	= { DataSource = Timings Type = uint32 Default = 0 } 
	        WavegenBroker1_ReadTime 		= { DataSource = Timings Type = uint32 Default = 0 }	
	        WavegenBroker1_ExecTime 		= { DataSource = Timings Type = uint32 Default = 0 }
	        WavegenBroker1_WriteTime		= { DataSource = Timings Type = uint32 Default = 0 }
	        WavegenBroker2_ReadTime 		= { DataSource = Timings Type = uint32 Default = 0 } 	       	         
	        WavegenBroker2_ExecTime 		= { DataSource = Timings Type = uint32 Default = 0 } 
	        WavegenBroker2_WriteTime		= { DataSource = Timings Type = uint32 Default = 0 } 
	        TestSignals1_ReadTime    		= { DataSource = Timings Type = uint32 Default = 0 } 	       	       
	        TestSignals1_ExecTime    		= { DataSource = Timings Type = uint32 Default = 0 } 
	        TestSignals1_WriteTime   		= { DataSource = Timings Type = uint32 Default = 0 }
	        RFMOutputBroker_ReadTime 		= { DataSource = Timings Type = uint32 Default = 0 } 	       
	        RFMOutputBroker_ExecTime 		= { DataSource = Timings Type = uint32 Default = 0 } 
	        RFMOutputBroker_WriteTime		= { DataSource = Timings Type = uint32 Default = 0 } 
	        RFMInputBroker_ReadTime         = { DataSource = Timings Type = uint32 Default = 0 } 
	        RFMInputBroker_ExecTime         = { DataSource = Timings Type = uint32 Default = 0 } 
	        RFMInputBroker_WriteTime        = { DataSource = Timings Type = uint32 Default = 0 } 
	        GAMSimulink_ReadTime  			= { DataSource = Timings Type = uint32 Default = 0 } 
	        GAMSimulink_ExecTime  			= { DataSource = Timings Type = uint32 Default = 0 }  
	        GAMSimulink_WriteTime 			= { DataSource = Timings Type = uint32 Default = 0 } 
	        DACBroker_ReadTime 				= { DataSource = Timings Type = uint32 Default = 0 } 	       	        
	        DACBroker_ExecTime 				= { DataSource = Timings Type = uint32 Default = 0 } 
	        DACBroker_WriteTime				= { DataSource = Timings Type = uint32 Default = 0 } 
	        StorageBroker1_ReadTime        	= { DataSource = Timings Type = uint32 Default = 0 } 	       
	        StorageBroker1_ExecTime        	= { DataSource = Timings Type = uint32 Default = 0 } 
	        StorageBroker1_WriteTime       	= { DataSource = Timings Type = uint32 Default = 0 } 
	        LoggerBroker_ReadTime  			= { DataSource = Timings Type = uint32 Default = 0 } 
	        LoggerBroker_ExecTime  			= { DataSource = Timings Type = uint32 Default = 0 } 
	        LoggerBroker_WriteTime 			= { DataSource = Timings Type = uint32 Default = 0 } 
                                                                                   
         }
         OutputSignals = { 
         	Thread1_CycleTime    			= { DataSource = DDB1 Type = uint32 Default = 0 }     
	        ADCBroker_ReadTime    			= { DataSource = DDB1 Type = uint32 Default = 0 } 	        
	        ADCBroker_ExecTime    			= { DataSource = DDB1 Type = uint32 Default = 0 } 
	        ADCBroker_WriteTime    			= { DataSource = DDB1 Type = uint32 Default = 0 }    
	        WavegenTimeBroker1_ReadTime   	= { DataSource = DDB1 Type = uint32 Default = 0 } 
	        WavegenTimeBroker1_ExecTime   	= { DataSource = DDB1 Type = uint32 Default = 0 } 
	        WavegenTimeBroker1_WriteTime  	= { DataSource = DDB1 Type = uint32 Default = 0 } 
	        WavegenTimeBroker2_ReadTime 	= { DataSource = DDB1 Type = uint32 Default = 0 } 	
	        WavegenTimeBroker2_ExecTime 	= { DataSource = DDB1 Type = uint32 Default = 0 } 
	        WavegenTimeBroker2_WriteTime	= { DataSource = DDB1 Type = uint32 Default = 0 } 
	        WavegenBroker1_ReadTime 		= { DataSource = DDB1 Type = uint32 Default = 0 }	
	        WavegenBroker1_ExecTime 		= { DataSource = DDB1 Type = uint32 Default = 0 }
	        WavegenBroker1_WriteTime		= { DataSource = DDB1 Type = uint32 Default = 0 }
	        WavegenBroker2_ReadTime 		= { DataSource = DDB1 Type = uint32 Default = 0 } 	       	         
	        WavegenBroker2_ExecTime 		= { DataSource = DDB1 Type = uint32 Default = 0 } 
	        WavegenBroker2_WriteTime		= { DataSource = DDB1 Type = uint32 Default = 0 } 
	        TestSignals1_ReadTime    		= { DataSource = DDB1 Type = uint32 Default = 0 } 	       	       
	        TestSignals1_ExecTime    		= { DataSource = DDB1 Type = uint32 Default = 0 } 
	        TestSignals1_WriteTime   		= { DataSource = DDB1 Type = uint32 Default = 0 }
	        RFMOutputBroker_ReadTime 		= { DataSource = DDB1 Type = uint32 Default = 0 } 	       
	        RFMOutputBroker_ExecTime 		= { DataSource = DDB1 Type = uint32 Default = 0 } 
	        RFMOutputBroker_WriteTime		= { DataSource = DDB1 Type = uint32 Default = 0 } 
	        RFMInputBroker_ReadTime         = { DataSource = DDB1 Type = uint32 Default = 0 } 
	        RFMInputBroker_ExecTime         = { DataSource = DDB1 Type = uint32 Default = 0 } 
	        RFMInputBroker_WriteTime        = { DataSource = DDB1 Type = uint32 Default = 0 } 
	        GAMSimulink_ReadTime  			= { DataSource = DDB1 Type = uint32 Default = 0 } 
	        GAMSimulink_ExecTime  			= { DataSource = DDB1 Type = uint32 Default = 0 } 
	        GAMSimulink_WriteTime 			= { DataSource = DDB1 Type = uint32 Default = 0 } 
	        DACBroker_ReadTime 				= { DataSource = DDB1 Type = uint32 Default = 0 } 	       	        
	        DACBroker_ExecTime 				= { DataSource = DDB1 Type = uint32 Default = 0 } 
	        DACBroker_WriteTime				= { DataSource = DDB1 Type = uint32 Default = 0 } 
	        StorageBroker1_ReadTime        	= { DataSource = DDB1 Type = uint32 Default = 0 } 	       
	        StorageBroker1_ExecTime        	= { DataSource = DDB1 Type = uint32 Default = 0 } 
	        StorageBroker1_WriteTime       	= { DataSource = DDB1 Type = uint32 Default = 0 } 
	        LoggerBroker_ReadTime  			= { DataSource = DDB1 Type = uint32 Default = 0 } 
	        LoggerBroker_ExecTime  			= { DataSource = DDB1 Type = uint32 Default = 0 } 
	        LoggerBroker_WriteTime 			= { DataSource = DDB1 Type = uint32 Default = 0 } 
         }                                                  
        }                                                   
    	                                                    
    	+DACBroker = {
        	Class = IOGAM
            InputSignals = {
				dac        = {		   DataSource = DDB1 Type = int16 NumberOfElements = 64 NumberOfDimensions = 1 }
				DOs        = {         DataSource = DDB1 Type = uint8 NumberOfElements = 4 NumberOfDimensions = 1 }        	
        		PWMduty    = {         DataSource = DDB1  Type = uint16 NumberOfElements = 8 NumberOfDimensions = 1 }
        	}
        	OutputSignals  = {
				DACoutputs = {		   DataSource = DACSystem Type = int16 NumberOfElements = 64 NumberOfDimensions = 1 }
				DOs        = {         DataSource = DACSystem Type = uint8 NumberOfElements = 4 NumberOfDimensions = 1 }        	
        		PWMduty    = {         DataSource = DACSystem Type = uint16 NumberOfElements = 8 NumberOfDimensions = 1 }        	
        	}
        }
    			
		+StorageBroker1 = {
		 Class = IOGAM
		 InputSignals = {	  
		  triggerforMDS = { DataSource = DDB1 Type = uint8 }
		  offsettimeforMDS = { DataSource = DDB1 Type = int32 } 
          
          dac = { DataSource = DDB1 Type = int16 }
          mem = { DataSource = DDB1 Type = uint8 }


         	Thread1_CycleTime    			= { DataSource = DDB1 Type = uint32 } //1       
	        ADCBroker_ReadTime    			= { DataSource = DDB1 Type = uint32 } //2	        
	        ADCBroker_ExecTime    			= { DataSource = DDB1 Type = uint32 } //3
	        ADCBroker_WriteTime    			= { DataSource = DDB1 Type = uint32 } //4   
	        WavegenTimeBroker1_ReadTime   	= { DataSource = DDB1 Type = uint32 } //5
	        WavegenTimeBroker1_ExecTime   	= { DataSource = DDB1 Type = uint32 } //6
	        WavegenTimeBroker1_WriteTime  	= { DataSource = DDB1 Type = uint32 } //7
	        WavegenTimeBroker2_ReadTime 	= { DataSource = DDB1 Type = uint32 } //8	
	        WavegenTimeBroker2_ExecTime 	= { DataSource = DDB1 Type = uint32 } //9
	        WavegenTimeBroker2_WriteTime	= { DataSource = DDB1 Type = uint32 } //10
	        WavegenBroker1_ReadTime 		= { DataSource = DDB1 Type = uint32 } //11
	        WavegenBroker1_ExecTime 		= { DataSource = DDB1 Type = uint32 } //12
	        WavegenBroker1_WriteTime		= { DataSource = DDB1 Type = uint32 } //13
	        WavegenBroker2_ReadTime 		= { DataSource = DDB1 Type = uint32 } //14	       	         
	        WavegenBroker2_ExecTime 		= { DataSource = DDB1 Type = uint32 } //15 
	        WavegenBroker2_WriteTime		= { DataSource = DDB1 Type = uint32 } //16 
	        TestSignals1_ReadTime    		= { DataSource = DDB1 Type = uint32 } //17	       	       
	        TestSignals1_ExecTime    		= { DataSource = DDB1 Type = uint32 } //18 
	        TestSignals1_WriteTime   		= { DataSource = DDB1 Type = uint32 } //19
	        RFMInputBroker_ReadTime         = { DataSource = DDB1 Type = uint32 } //20 
	        RFMInputBroker_ExecTime         = { DataSource = DDB1 Type = uint32 } //21 
	        RFMInputBroker_WriteTime        = { DataSource = DDB1 Type = uint32 } //22 
	        GAMSimulink_ReadTime  			= { DataSource = DDB1 Type = uint32 } //23 
	        GAMSimulink_ExecTime  			= { DataSource = DDB1 Type = uint32 } //24 
	        GAMSimulink_WriteTime 			= { DataSource = DDB1 Type = uint32 } //25 
	        RFMOutputBroker_ReadTime 		= { DataSource = DDB1 Type = uint32 } //26 	       
	        RFMOutputBroker_ExecTime 		= { DataSource = DDB1 Type = uint32 } //27 
	        RFMOutputBroker_WriteTime		= { DataSource = DDB1 Type = uint32 } //28 
	        DACBroker_ReadTime 				= { DataSource = DDB1 Type = uint32 } //29 	       	        
	        DACBroker_ExecTime 				= { DataSource = DDB1 Type = uint32 } //30 
	        DACBroker_WriteTime				= { DataSource = DDB1 Type = uint32 } //31 
	        StorageBroker1_ReadTime        	= { DataSource = DDB1 Type = uint32 } //32 	       
	        StorageBroker1_ExecTime        	= { DataSource = DDB1 Type = uint32 } //33  
	        StorageBroker1_WriteTime       	= { DataSource = DDB1 Type = uint32 } //34  
	        LoggerBroker_ReadTime  			= { DataSource = DDB1 Type = uint32 } //35  
	        LoggerBroker_ExecTime  			= { DataSource = DDB1 Type = uint32 } //36  
	        LoggerBroker_WriteTime 			= { DataSource = DDB1 Type = uint32 } //37  
			ADCuscounter                    = { DataSource = DDB1 Type = uint32 } //38

			Time 							= { DataSource = DDB1 Type = int32 } // 39
			realtime                        = { DataSource = DDB1 Type = float32 } // 40

		 		  
		 }
		 OutputSignals = {
		  Trigger = { DataSource = MDSWriter Type = uint8 }
		  Time = { DataSource = MDSWriter Type = int32 }
                    
		  dac  = 	{ DataSource = MDSWriter Type = int16   NumberOfElements = 64 NumberOfDimensions = 1 }
		  mem  = 	{ DataSource = MDSWriter Type = uint8   NumberOfElements = 1008 NumberOfDimensions = 1 }
		  
		  st   = 	{ DataSource = MDSWriter Type = uint32  NumberOfElements = 38 NumberOfDimensions = 1 }
		  sysTime = 	 { DataSource = MDSWriter Type = int32 }
		  sysrealtime = { DataSource = MDSWriter Type = float32 } 		  		 		  		 
		 }
		}
			
		+LoggerBroker = {
		 Class = IOGAM
		 InputSignals = {
		 	Counter = 	{ DataSource = DDB1 Type = int32 }
		 	Time    = 		{ DataSource = DDB1 Type = int32 }
		 	//realwavegen = { DataSource = DDB1 Type = float32 Ranges = {{0,0}} }
		 	realtime = 		{ DataSource = DDB1 Type = float32 }
		 }
		 OutputSignals =
		 {
		    Counter = 	{ DataSource = LoggerDataSource Type = int32 }
		    Time    = 		{ DataSource = LoggerDataSource Type = int32 }
		    //wavegen1 = 	{ DataSource = LoggerDataSource Type = float32 }
		    realtime = 		{ DataSource = LoggerDataSource Type = float32 }
		 }
		} 
		
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        
        +DDB1 = {
            Class = GAMDataSource
       	}
       	
        +LoggerDataSource = {
            Class = LoggerDataSource
        }  
            
        +Timings = {
            Class = TimingDataSource
        }       
                 
        +ADCSystem = {
 	    	Class = AFHBA404::ACQ2106N02IN
			Device = 0 // Userspace device entry to be opened
			// TODO: IndependentThread isn't working, thread semaphore not handled by Execute, to be fixed
			//ExecutionMode = RealTimeThread //Optional. If not set ExecutionMode = IndependentThread. If ExecutionMode == IndependentThread a thread is spawned to generate the time events. ExecutionMode == RealTimeThread the time is generated in the context of the real-time thread.
		    ExecutionMode = IndependentThread //Optional. If not set ExecutionMode = IndependentThread. If ExecutionMode == IndependentThread a thread is spawned to generate the time events. ExecutionMode == RealTimeThread the time is generated in the context of the real-time thread.			
			CPUMask = 0x02 //Optional and only relevant if ExecutionMode=IndependentThread
     		Cycles = 75000
     		StartTimeUsec = -4500000
     		Frequency = 10000
     		// This script is called upon entering run state, after having put the ADC in LLC mode
     		// it arms the ADC system end enters a wait trigger state
     		// CAUTION: in reprocessing the soft-trigger comes too early, for now
     		// arming must be done externally w.r.t. MARTe and the following line commented out
     		// CAUTION: the number of transient samples (samples after which the ADC goes back in idle state) is set in this script
     		//RunScript = "/root/generic/arm-ADC" 
     		//EndrunScript = "/root/generic/checkstop-ADC"
     		Signals = {
         		Counter = { // the sample counter maintained by the ADC subsystem
             		Type = int32
         		}
         		Time = {    // the realtime maintained by the ADC subsystem, units [us]
             		Type = int32
             		Frequency = 10000
         		}
         		ADCuscounter = { // the us cycle counter maintained by the ADC, useful to debug ADC clocking issues
         		    Type = uint32
         		}
         		ADCinputs = { // ADC inputs vector
             		Type = int16
             		NumberOfElements = 192
         		}
         	}
         	+TermMessage1 = { Class=Message Destination=StateMachine Function=RUNCOMPLETE }
     	}    
     		
        +DACSystem = {
 	    	Class = AFHBA404::ACQ2106N02OUT
			Device = 1 // Userspace device entry to be opened
			ExecutionMode = RealTimeThread // Only this mode is supported here
		    Signals = {
		         DACoutputs = { // DAC outputs vector
		             Type = int16
		             NumberOfElements = 64
		         }
		         DOs = { // DO outputs vector
		             Type = uint8
		             NumberOfElements = 4
		         }
		         PWMduty = { // Duty cycle of PWM generators
		             Type = uint16
		             NumberOfElements = 8
		         }
		    }
     	}   
     	     
		+MDSWavegen_WG0202bus = {
		 Class = MDSObjWavegen
		 Shot = 65541
		 Frequency = 10000.00
		 Server=tcvdata.epfl.ch
		 Tree=tcv_shot
		 Verbosity = 0
		 Interpolation = 1
		 TimeOffset = 0.000
		 +hyb_A_matrix_ref                                   = { Class=MDSWgSigArray1                 Path="\\draw_refs:ref_%03d"                   StartIdx=1 StopIdx=24 }		 
		 +hyb_FF_e_u                                         = { Class=MDSWgSigArray1                 Path="\\draw_feedfor_e_u:alim_%03d"           StartIdx=1 StopIdx=8 }
		 +hyb_FF_f_u                                         = { Class=MDSWgSigArray1                 Path="\\draw_feedfor_f_u:alim_%03d"           StartIdx=1 StopIdx=8 }
		 +hyb_FF_oh_u                                        = { Class=MDSWgSigArray1                 Path="\\draw_feedfor_oh_u:alim_%03d"          StartIdx=1 StopIdx=2 }
		 +hyb_FF_gas                                         = { Class=MDSWgSigArray1                 Path="\\draw_feedfor_gas:alim_%03d"           StartIdx=1 StopIdx=4 }
		 +hyb_FF_e_i                                         = { Class=MDSWgSigArray1                 Path="\\draw_feedfor_e_i:alim_%03d"           StartIdx=1 StopIdx=8 }
		 +hyb_FF_f_i                                         = { Class=MDSWgSigArray1                 Path="\\draw_feedfor_f_i:alim_%03d"           StartIdx=1 StopIdx=8 }
		 Signals = {
		   time = { Type = int32 }
		   wavegen_WG0202bus = { Type = float32 NumberOfElements = 62 NumberOfDimensions = 1 }	 
		 }	
		} 
		
		+MDSWavegen_ADC02bus = {
		 Class = MDSObjWavegen
		 Shot = 65541
		 Frequency = 10000.00
		 Server=tcvscd.crpp.tcv
		 Tree=rtc
		 Verbosity = 0
		 Interpolation = 0
		 TimeOffset = 0.0
		 +adc02                                       = { Class=MDSWgSigArray1Int16            Path="\\top.tcvrt02.adc.adc_%03d:raw" Timepath="\\top.tcvrt02.adc.adc_%03d" PeriodPath="\\top.tcvrt02.params:d_time" StartIdx=1 StopIdx=192 }
		 Signals = {
		   time = { Type = int32 }
		   wavegen_ADC02bus = { Type = int16 NumberOfElements = 192 NumberOfDimensions = 1 }
		 }
		}
	
        +MDSWriter = {
        	Class = MDSSPCWriter
			NumberOfBuffers = 100000
        	CPUMask = 0x20
        	StackSize = 10000000
        	TreeName = "rtc"
        	StoreOnTrigger = 1
        	Verbosity = 2
        
        	// New shot requested
        	//PulseNumber = -1 
        
        	// Undefined, OpenTree is deferred, it is performed in response to a specific message sent by the ShotManager
        	// this is necessary because we need a late opening to have simulink buses configured
        	// the shotno is the parameter of the opening message
        	PulseNumber = -2 
          	
        	EventName = "updatejScope"
        	TimeRefresh = 5
        	NumberOfPreTriggers = 0
			NumberOfPostTriggers = 0
		
			Signals = {
				Trigger = { Type = uint8 }	
			    Time    = { Type = int32 TimeSignal = 1 TimeSignalMultiplier = 1e-6 }
  
			    dac     = { NodeName = "TCVRT02.DAC.DAC_%03d.RAW"       Indexed = 1 BusSrc = RTApp.Functions.GAMSimulink BusName = dac NamePath = ".-.NAME" Period = 0.0001  MakeSegmentAfterNWrites = 100000 AutomaticSegmentation = 0 NumberOfElements = 64 SamplePhase = 0 }	
				
				mem		= { NodeName = "TCVRT02.THREAD02.MEMS.MEM_%03d:RAW"  Indexed = 1 BusSrc = RTApp.Functions.GAMSimulink BusName = mem NamePath = ".-.NAME" Period = 0.0001  MakeSegmentAfterNWrites = 100000 AutomaticSegmentation = 0 NumberOfElements = 1008 SamplePhase = 0 }
				st      = { NodeName = "TCVRT02.TSTATS.STAT_%03d" 	    Indexed = 1 Period = 0.0001  MakeSegmentAfterNWrites = 100000 AutomaticSegmentation = 0 NumberOfElements = 38 SamplePhase = 0 }    	

		  		sysTime 		= { NodeName = "TCVRT02.TSTATS.STAT_041" 	     Period = 0.0001  MakeSegmentAfterNWrites = 100000 AutomaticSegmentation = 0 NumberOfElements = 1 SamplePhase = 0 }    	
		  		sysrealtime 	= { NodeName = "TCVRT02.TSTATS.STAT_042" 	     Period = 0.0001  MakeSegmentAfterNWrites = 100000 AutomaticSegmentation = 0 NumberOfElements = 1 SamplePhase = 0 }    	 		  		 
 
        	}
        	+TreeFlushedMsg = { Class = Message Destination = ShotManager Function = TreeFlushed Mode = ExpectsReply }
        }
       
                      
    }
    +States = {
        Class = ReferenceContainer
        +Run = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread CPUs = 0x04 Functions = {
                      TimingSignalsBroker
                      ADCBroker 
                      WavegenTimeBroker1 
                      WavegenTimeBroker2 
                      WavegenBroker1 
                      WavegenBroker2 
                      TestSignals1 
                      Dummy1
                      //RFMInputBroker
                      //EtherCATInputBroker
                      GAMSimulink 
                      //RFMOutputBroker
                      //EtherCATOutputBroker
                      DACBroker 
                      StorageBroker1
                      //TimingSignalsBroker
                      //LoggerBroker
                      }                                
                }
            }
        }
                
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
