/*
 RFM2g synchslave tester 
 CGalperti 10.11.2019

 - RFM2g DataSource in slave mode synchronizing the real-time thread
 - SPC shot manager
 - SPC state machine 
 - TCP server for advancing state machine, ShotManager for sending status to MDS+
 - MDSWriter for test monitoring
*/

+ShotManager = {
 Class = SPCShotManager
 Server = crpppc171.epfl.ch
 Tree = rtc_state
 Shot = 1
 Statusnode = STATE2
 AbortScript = "/root/generic/abort-ADC" 
 // The parameter param1 is the shotnumber to be opened 
 //+OpenTreeMsg1 = { Class = Message Destination = RTApp.Data.MDSWriter Function = OpenTree Mode = ExpectsReply +Parameters = { Class = ConfigurationDatabase param1 = -1 } } 
 //+OpenTreeMsg1 = { Class = Message Destination = RTApp.Data.MDSWriter Function = OpenTree Mode = ExpectsReply +Parameters = { Class = ConfigurationDatabase param1 = 0 } }
}

+TCPMessageProxy = {
    Class = TCPSocketMessageProxyExample
    Port = 24680
}

+StateMachine = {
 Class = StateMachine
 +INITIAL = {
  Class = ReferenceContainer
  +RUN = {
   Class = StateMachineEvent
   NextState = "RUN"
   NextStateError = "ERROR"
   Timeout = 0
   +ChangeToRunMsg               = { Class = Message Destination = RTApp     Function = PrepareNextState Mode = ExpectsReply +Parameters = { Class = ConfigurationDatabase param1 = Run } }
   +StartNextStateExecutionMsg   = { Class = Message Destination = RTApp     Function = StartNextStateExecution Mode = ExpectsReply }
   +ShotManagerStartMsg 	     = { Class = Message Destination = ShotManager Function = Run Mode = ExpectsReply }
  }
  +ERROR = {
   Class = StateMachineEvent
   NextState = "ERROR"
   NextStateError = "ERROR"
   Timeout = 0
   +ShotManagerErrorMsg 	     = { Class = Message Destination = ShotManager Function = Error Mode = ExpectsReply }  
  }
  +EXIT = {
   Class = StateMachineEvent
   NextState = "FINAL"
   NextStateError = "ERROR"
   Timeout = 0
   +ExitAppMsg = { Class = Message Destination = ShotManager     Function = Exit }   
  }
  +ABORT = {
   Class = StateMachineEvent
   NextState = "FINAL"
   NextStateError = "ERROR"
   Timeout = 0
   +ExitAppMsg = { Class = Message Destination = ShotManager     Function = Exit }   
  }
 }
 +RUN = {
  Class = ReferenceContainer
  +RUNCOMPLETE = {
   Class = StateMachineEvent
   NextState = "ENDRUN"
   NextStateError = "ERROR"
   Timeout = 0
   +StopCurrentStateExecutionMsg = { Class = Message Destination = RTApp     			Function = StopCurrentStateExecution Mode = ExpectsReply }
   +MdsFlushSegmentsMsg          = { Class = Message Destination = RTApp.Data.MDSWriter Function = FlushSegments Mode = ExpectsReply }
   +ShotManagerStopMsg 			 = { Class = Message Destination = ShotManager 			Function = Stop Mode = ExpectsReply }
  }
  +ABORT = {
   Class = StateMachineEvent
   NextState = "FINAL"
   NextStateError = "ERROR"
   Timeout = 0
   +StopLLCMsg					   = { Class = Message Destination = RTApp.Data.RFM  Function = StopLLC Mode = ExpectsReply }
   +StopCurrentStateExecutionMsg = { Class = Message Destination = RTApp     			Function = StopCurrentStateExecution Mode = ExpectsReply }
   //+MdsFlushSegmentsMsg          = { Class = Message Destination = RTApp.Data.MDSWriter Function = FlushSegments Mode = ExpectsReply }  
   +ShotManagerAbortMsg 		 = { Class = Message Destination = ShotManager 			Function = Abort Mode = ExpectsReply }
  }
 }
 +ENDRUN = {
  Class = ReferenceContainer
  +ENTER = {
   Class = ReferenceContainer
   //+StopCurrentStateExecutionMsg = { Class = Message Destination = RTApp     Function = StopCurrentStateExecution Mode = ExpectsReply }   
   //+ShotManagerStopMsg 			 = { Class = Message Destination = ShotManager Function = Stop Mode = ExpectsReply }
  }
  +EXIT = {
   Class = StateMachineEvent
   NextState = "FINAL"
   NextStateError = "ERROR"
   Timeout = 0
   +ExitAppMsg = { Class = Message Destination = ShotManager     Function = Exit }   
  }
  +ABORT = {
   Class = StateMachineEvent
   NextState = "FINAL"
   NextStateError = "ERROR"
   Timeout = 0
   +ExitAppMsg = { Class = Message Destination = ShotManager     Function = Exit }   
  }
 } 
 +FINAL = {
  Class = ReferenceContainer
  +FINAL = {
   Class = StateMachineEvent
   NextState = "FINAL"
   NextStateError = "ERROR"
   Timeout = 0   
  } 
 }
 +ERROR = {
  Class = ReferenceContainer  
  +ENTER = {
   Class = ReferenceContainer
   +ShotManagerErrorMsg = { Class = Message Destination = ShotManager     Function = Error Mode = ExpectsReply }   
  }  
  +EXIT = {
   Class = StateMachineEvent
   NextState = "FINAL"
   NextStateError = "ERROR"
   Timeout = 0
   +ExitAppMsg = { Class = Message Destination = ShotManager     Function = Exit }   
  }
 }
}

$RTApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        
        +RFM = {
            Class = IOGAM
            InputSignals = {
                Counter 	= {               DataSource = RFM Type = int32 }                
                Time    	= { Frequency = 1000 DataSource = RFM Type = int32 }
        		InputBuffer = {               DataSource = RFM Type = uint8 NumberOfElements = 664 }
            }
            OutputSignals = {
                Counter =   {                 DataSource = DDB1 Type = int32 }                
                Time =      {                 DataSource = DDB1 Type = int32 }            
                
		 		owndata1 =  {                 DataSource = DDB1 Type = uint32 }
		 		owndata2 =  {                 DataSource = DDB1 Type = float32 }		 		
		 		RFMdata1 =  {                 DataSource = DDB1 Type = uint32 }
		 		rfm_in1 =    {                 DataSource = DDB1 Type = uint8 NumberOfElements = 632 }		 		
		 		RFMdata2 =  {                 DataSource = DDB1 Type = float32 }
		 		rfm_in2 =    {                 DataSource = DDB1 Type = uint8 NumberOfElements = 16 }		 		
		 		
		 		//adcin =     {                 DataSource = DDB1 Type = int16 NumberOfElements = 192 }                         
		 		
            }
        }
 
        +TestSignals1 = {
        	Class = HelperGAM1
        	        	
        	MdsTimeOffset = 0
        	//MdsStartTime = -4495000
        	//MdsStopTime = 3950000

        	MdsStartTime = -1000000
        	MdsStopTime = 2500000

        	InputSignals = { 
        		Time  = 		{ DataSource = DDB1     Type = int32 }
        	}
        	OutputSignals = {
				realtime			= { DataSource = DDB1 Type = float32  NumberOfElements = 1   }   	
            	adc  				= { DataSource = DDB1 Type = int16    NumberOfElements = 192 }
				rfm_in_dummy      	= { DataSource = DDB1 Type = uint8    NumberOfElements = 664 }
				wavegen     		= { DataSource = DDB1 Type = float32  NumberOfElements = 62  }
				proc_in     		= { DataSource = DDB1 Type = float32  NumberOfElements = 3  }
				offsettimeforMDS	= { DataSource = DDB1 Type = int32 	  NumberOfElements = 1 }
		  		triggerforMDS 		= { DataSource = DDB1 Type = uint8    NumberOfElements = 1 }
                DOs 				= { DataSource = DDB1 Type = uint8    NumberOfElements = 4 }
                PWMduty 			= { DataSource = DDB1 Type = uint16   NumberOfElements = 8 } 
        	}
        }        
        
        +LoggerBroker = {
		 Class = IOGAM
		 InputSignals = {
		 	Counter = 		{ DataSource = DDB1 Type = int32 }
		 	//Time    = 		{ DataSource = DDB1 Type = int32 }
		 	RFMdata1 =      { DataSource = DDB1 Type = uint32 }
		 }
		 OutputSignals =
		 {
		    Counter-toMaster   =      { DataSource = LoggerDataSource Type = int32 }
		    //Time               = 	  { DataSource = LoggerDataSource Type = int32 }
		    Counter-fromMaster =      { DataSource = LoggerDataSource Type = int32 }
		 }
        } 
        
        +RFMOutputBroker = {
            Class = IOGAM
            InputSignals = {
		    	//Counter         = { 		DataSource = DDB1  Type = int32 }
		    	//adc  			= { 		DataSource = DDB1 Type = int16    NumberOfElements = 192 }
		    	
		 		RFMdata1 =  {                 DataSource = DDB1 Type = uint32 }
		 		RFMdata2 =  {                 DataSource = DDB1 Type = float32 }

		    }
		    OutputSignals = {
		        OutputBuffer    = { 		DataSource = RFM  Type = uint8 NumberOfElements = 8 }		    
		    }        
        }       
        
        +TimingSignalsBroker = {
         Class = IOGAM
         InputSignals = { 
         	Thread1_CycleTime    			= { DataSource = Timings Type = uint32 Alias = Run.Thread1_CycleTime }
         }
         OutputSignals = { 
         	Thread1_CycleTime    			= { DataSource = DDB1 Type = uint32 } //1       
         }
        } 
        
        +StorageBroker1 = {
		 Class = IOGAM
		 InputSignals = {	  
		  triggerforMDS = { DataSource = DDB1 Type = uint8 }
		  offsettimeforMDS = { DataSource = DDB1 Type = int32 } 
          
		  Counter						= { DataSource = DDB1 Type = int32  } // 1     
		  RFMdata1						= { DataSource = DDB1 Type = uint32  } // 2  
          Time 							= { DataSource = DDB1 Type = int32 }            
		  realtime                      = { DataSource = DDB1 Type = float32 }
		  RFMdata2                      = { DataSource = DDB1 Type = float32 }   		       
		  //offsettimeforMDS				= { DataSource = DDB1 Type = int32 	  NumberOfElements = 1 }
		  //triggerforMDS 				= { DataSource = DDB1 Type = uint8    NumberOfElements = 1 }

	      Thread1_CycleTime 			= { DataSource = DDB1 Type = uint32 } // 10	 
		 		  
		 }
		 OutputSignals = {
		  Trigger = { DataSource = MDSWriter Type = uint8 }
		  Time = { DataSource = MDSWriter Type = int32 }
                    
		  Counter						= { DataSource = MDSWriter Type = int32  } // 1
		  RFMdata1						= { DataSource = MDSWriter Type = uint32  } // 2     		       		            
          RFMTime 						= { DataSource = MDSWriter Type = int32 }            
          RFMTimesec 					= { DataSource = MDSWriter Type = float32 }            
		  RFMdata2                      = { DataSource = MDSWriter Type = float32 }   		       
		  //offsettimeforMDS				= { DataSource = MDSWriter Type = int32 	  NumberOfElements = 1 }
		  //triggerforMDS 				= { DataSource = MDSWriter Type = uint8    NumberOfElements = 1 }

	      cycletime			 			= { DataSource = MDSWriter Type = uint32 } // 10	   

		 }
		}
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
       	}        
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
                
        +Timings = {
            Class = TimingDataSource
        }
          
        +RFM = {
            Class = RFM2g
		    //ExecutionMode = RealTimeThread //Optional. If not set ExecutionMode = IndependentThread. If ExecutionMode == IndependentThread a thread is spawned to generate the time events. ExecutionMode == RealTimeThread the time is generated in the context of the real-time thread.
            ExecutionMode = IndependentThread
            CPUMask = 0x08 //Optional and only relevant if ExecutionMode=IndependentThread
            Device = /dev/rfm2g0 // Mandatory, the Linux device handling the RFM card installed on the system
            
            //ReadOffset = 64 // Mandatory, the offset in bytes of the read starting point in the RF memory
            //WriteOffset = 128 // Mandatory, the offset in bytes of the write starting point in the RF memory
            ReadOffset = 64 // Mandatory, the offset in bytes of the read starting point in the RF memory
            WriteOffset = 64 // Mandatory, the offset in bytes of the write starting point in the RF memory
        
            UseDMA = 1 // Optional, if 1 data exchange will be performed using DMA, if 0 with programmed IO. Default = 0            
            DMABufferAddress = 0x3aec00000 // Required if UseDMA=1, physical address (BEWARE, NOT VIRTUAL, i.e. coming from cat /proc/iomem) of the kernel reserved DMA memory buffer (see node (1))
            WaitDMA = 1 // Required if UseDMA=1, if 0 the DataSource launches DMA read/write transactions without waiting for them to be completed. If 1 it waits for them. (see node (2))
            DMABufferSize = 2048 // The DMA buffer size
            DMAThreshold = 32 // The DMA threshold after which DMA must be used (bytes)
        
            //Synchronizing = 0 // Optional, if 1 the DataSource synchronizes the calling thread using SPC synchronization protocol, if 0 it doesn't synchronize and only exchanges data. Default = 0
            //BasePeriod = 1e-4 // Required if Synchronizing=1, the base period of the RFM synchronization clock (coming from the RFM master mode)
            DownSampleFactor = 10 // Required if Synchronizing=1, the downsample factor for synchronization strobes
            StartTime = 100 // Required if Synchronizing=1, the start time at which the DataSource will begin to synchronize
        
            Master = 0 // Optional, if 1 the node is the RFM synchronizing node, i.e. sends the system time around the RFM ring. Default = 0
        	
        	Cycles = 70000
        
            //InputEnabled = 1  // To be implemented
            //Outputenabled = 1 // To be implemented
		
		    Signals = {
		        Counter         = { Type = int32 }
                Time            = { Type = int32 Frequency = 1 }
                //Time            = { Type = int32 }                

          		InputBuffer     = { Type = uint8  NumberOfElements = 664 }
		        OutputBuffer    = { Type = uint8  NumberOfElements = 8 }
          		
          		//InputBuffer     = { Type = uint8  NumberOfElements = 388 }
		        //OutputBuffer    = { Type = uint8  NumberOfElements = 388 }
            }
	        +TermMessage1 = { Class=Message Destination=StateMachine Function=RUNCOMPLETE }   
        }     
        
        +MDSWriter = {
        	Class = MDSWriter
			NumberOfBuffers = 100000
        	CPUMask = 0x02
        	StackSize = 10000000
        	TreeName = "martetest"
        	//TreeName = "rtc2"
        	StoreOnTrigger = 1
        	Verbosity = 0
        
        	// New shot requested
        	PulseNumber = -1 
        
        	// Undefined, OpenTree is deferred, it is performed in response to a specific message sent by the ShotManager
        	// this is necessary because we need a late opening to have simulink buses configured
        	// the shotno is the parameter of the opening message
        	//PulseNumber = -2 
          	//PulseNumber = 10
          	
        	EventName = "updatejScope"
        	TimeRefresh = 5
        	NumberOfPreTriggers = 1
			NumberOfPostTriggers = 1
		
			Signals = {
				Trigger = { Type = uint8 }	
			    Time    = { Type = int32 TimeSignal = 1 TimeSignalMultiplier = 1e-6 }
  
        		Counter   = { NodeName = "ST.CH03"  					Period = 0.001  MakeSegmentAfterNWrites = 100000 AutomaticSegmentation = 0 NumberOfElements = 1 SamplePhase = 0 } 				
        		RFMdata1  = { NodeName = "ST.CH04"  					Period = 0.001 MakeSegmentAfterNWrites = 100000 AutomaticSegmentation = 0 NumberOfElements = 1 SamplePhase = 0 } 				        		
        		RFMTime      = { NodeName = "ST.CH05"  					Period = 0.001 MakeSegmentAfterNWrites = 100000 AutomaticSegmentation = 0 NumberOfElements = 1 SamplePhase = 0 } 				        		
        		RFMTimesec      = { NodeName = "ST.CH06"  					Period = 0.001 MakeSegmentAfterNWrites = 100000 AutomaticSegmentation = 0 NumberOfElements = 1 SamplePhase = 0 } 				        		
        		RFMdata2  = { NodeName = "ST.CH07"  					Period = 0.001 MakeSegmentAfterNWrites = 100000 AutomaticSegmentation = 0 NumberOfElements = 1 SamplePhase = 0 } 				        		
           		
           		//offsettimeforMDS = { NodeName = "ST.CH07"  					Period = 0.001 MakeSegmentAfterNWrites = 100000 AutomaticSegmentation = 0 NumberOfElements = 1 SamplePhase = 0 } 				        		
		  		//triggerforMDS 	 = { NodeName = "ST.CH08"  					Period = 0.001 MakeSegmentAfterNWrites = 100000 AutomaticSegmentation = 0 NumberOfElements = 1 SamplePhase = 0 } 				        		
           		
           		
           		
           		cycletime = { NodeName = "ST.CH11"  					Period = 0.001  MakeSegmentAfterNWrites = 100000 AutomaticSegmentation = 0 NumberOfElements = 1 SamplePhase = 0 } 
        	}
        	+TreeFlushedMsg = { Class = Message Destination = ShotManager Function = TreeFlushed Mode = ExpectsReply }
        }                              
    }
    +States = {
        Class = ReferenceContainer
        +Run = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread CPUs = 0x04
                    Functions = {
                     //GAMTimer
                     RFM 
                     //Rename1 
                     //Rename2 
                     TestSignals1
                     RFMOutputBroker 
                     //RFMInputBroker
                     //LoggerBroker 
                     TimingSignalsBroker
                     StorageBroker1
                    }
                }
            }
        }        
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
