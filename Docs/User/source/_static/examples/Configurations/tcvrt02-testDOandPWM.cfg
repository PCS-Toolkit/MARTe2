/*
 TCV SCD MARTe2 cfg file
 node 02 (tcvrt02), DO and PWM outputs tester
 CGalperti 28.01.2020

 - 1 thread, AFHBA404 timing, transient auto termination
 - ADC control scripts ENABLED
 - state machine
 - TCP server for advancing state machine, ShotManager for sending status to MDS+ 
 - wavegen loading through MDSObjWavegen
 - MDS+ storage of algorithm outputs and timings
 - DAC connected
 
 Changelog:
 
 - 28.01.20 CG first written from tcvrt02-1005
*/

+ShotManager = {
 Class = SPCShotManager
 Server = tcvscd.crpp.tcv
 Tree = rtc_state
 Shot = 1
 Statusnode = MARTESTATE.TCVRT02
 AbortScript = "/root/scd/commands/abort-ADC" 
 // The parameter param1 is the shotnumber to be opened 
 +OpenTreeMsg1 = { Class = Message Destination = RTApp.Data.MDSWriter Function = OpenTree Mode = ExpectsReply +Parameters = { Class = ConfigurationDatabase param1 = 0 } }
}

+TCPMessageProxy = {
    Class = TCPSocketMessageProxyExample
    Port = 24680
}

+StateMachine = {
 Class = StateMachine
 +INITIAL = {
  Class = ReferenceContainer
  +RUN = {
   Class = StateMachineEvent
   NextState = "RUN"
   NextStateError = "ERROR"
   Timeout = 0
   +ChangeToRunMsg               = { Class = Message Destination = RTApp     Function = PrepareNextState Mode = ExpectsReply +Parameters = { Class = ConfigurationDatabase param1 = Run } }
   +StartNextStateExecutionMsg   = { Class = Message Destination = RTApp     Function = StartNextStateExecution Mode = ExpectsReply }
   +ShotManagerStartMsg 	     = { Class = Message Destination = ShotManager Function = Run Mode = ExpectsReply }
  }
  +ERROR = {
   Class = StateMachineEvent
   NextState = "ERROR"
   NextStateError = "ERROR"
   Timeout = 0
   +ShotManagerErrorMsg 	     = { Class = Message Destination = ShotManager Function = Error Mode = ExpectsReply }  
  }
  +EXIT = {
   Class = StateMachineEvent
   NextState = "FINAL"
   NextStateError = "ERROR"
   Timeout = 0
   +ExitAppMsg = { Class = Message Destination = ShotManager     Function = Exit }   
  }
  +ABORT = {
   Class = StateMachineEvent
   NextState = "FINAL"
   NextStateError = "ERROR"
   Timeout = 0
   +ExitAppMsg = { Class = Message Destination = ShotManager     Function = Exit }   
  }
 }
 +RUN = {
  Class = ReferenceContainer
  +RUNCOMPLETE = {
   Class = StateMachineEvent
   NextState = "ENDRUN"
   NextStateError = "ERROR"
   Timeout = 0
   +StopCurrentStateExecutionMsg = { Class = Message Destination = RTApp     			Function = StopCurrentStateExecution Mode = ExpectsReply }
   +MdsFlushSegmentsMsg          = { Class = Message Destination = RTApp.Data.MDSWriter Function = FlushSegments Mode = ExpectsReply }
   +ShotManagerStopMsg 			 = { Class = Message Destination = ShotManager 			Function = Stop Mode = ExpectsReply }
  }
  +ABORT = {
   Class = StateMachineEvent
   NextState = "FINAL"
   NextStateError = "ERROR"
   Timeout = 0
   +StopLLCMsg					   = { Class = Message Destination = RTApp.Data.ADCSystem  Function = StopLLC Mode = ExpectsReply }
   +StopCurrentStateExecutionMsg = { Class = Message Destination = RTApp     			Function = StopCurrentStateExecution Mode = ExpectsReply }
   //+MdsFlushSegmentsMsg          = { Class = Message Destination = RTApp.Data.MDSWriter Function = FlushSegments Mode = ExpectsReply }  
   +ShotManagerAbortMsg 		 = { Class = Message Destination = ShotManager 			Function = Abort Mode = ExpectsReply }
  }
 }
 +ENDRUN = {
  Class = ReferenceContainer
  +ENTER = {
   Class = ReferenceContainer
   //+StopCurrentStateExecutionMsg = { Class = Message Destination = RTApp     Function = StopCurrentStateExecution Mode = ExpectsReply }   
   //+ShotManagerStopMsg 			 = { Class = Message Destination = ShotManager Function = Stop Mode = ExpectsReply }
  }
  +EXIT = {
   Class = StateMachineEvent
   NextState = "FINAL"
   NextStateError = "ERROR"
   Timeout = 0
   +ExitAppMsg = { Class = Message Destination = ShotManager     Function = Exit }   
  }
  +ABORT = {
   Class = StateMachineEvent
   NextState = "FINAL"
   NextStateError = "ERROR"
   Timeout = 0
   +ExitAppMsg = { Class = Message Destination = ShotManager     Function = Exit }   
  }
 } 
 +FINAL = {
  Class = ReferenceContainer
  +FINAL = {
   Class = StateMachineEvent
   NextState = "FINAL"
   NextStateError = "ERROR"
   Timeout = 0   
  } 
 }
 +ERROR = {
  Class = ReferenceContainer  
  +ENTER = {
   Class = ReferenceContainer
   +ShotManagerErrorMsg = { Class = Message Destination = ShotManager     Function = Error Mode = ExpectsReply }   
  }  
  +EXIT = {
   Class = StateMachineEvent
   NextState = "FINAL"
   NextStateError = "ERROR"
   Timeout = 0
   +ExitAppMsg = { Class = Message Destination = ShotManager     Function = Exit }   
  }
 }
}

$RTApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
           
        +ADCBroker = {
            Class = IOGAM
            InputSignals = {
                Counter      = {                   DataSource = ADCSystem Type = int32 }                
                Time         = { Frequency = 50000 DataSource = ADCSystem Type = int32 }
            	ADCuscounter = {                   DataSource = ADCSystem Type = uint32 }
                ADCinputs    = {                   DataSource = ADCSystem Type = int16 NumberOfElements = 192 NumberOfDimensions = 1 }
            }
            OutputSignals = {
                Counter      = {                   DataSource = DDB1  Type = int32 Default = 0 }                
                Time         = {                   DataSource = DDB1  Type = int32 Default = 0 }      
                ADCuscounter = {                   DataSource = DDB1  Type = uint32 Default = 0 }
                realadc      = {                   DataSource = DDB1  Type = int16 NumberOfElements = 192  NumberOfDimensions = 1 }   
            }
        }       
                    
        +TimeSignals = {
        	Class = SPCTimeGAM
        	MdsTimeOffset = 0       
			MdsStartTime = 10000 
			MdsStopTime = 990000   
        	InputSignals = {
        		Time  = { DataSource = DDB1     Type = int32 }
        	}
        	OutputSignals = {
        		realtime         = { DataSource = DDB1 Type = float32     }
				offsettimeforMDS = { DataSource = DDB1 Type = int32       }
				triggerforMDS    = { DataSource = DDB1 Type = uint8       }
        	}
        }     
                
        +Constants = {
        	Class = ConstantGAM
        	OutputSignals = {
				dac        			= { DataSource = DDB1 Type = int16    NumberOfElements = 64    }
				/*
				PWMcmd1 			= { DataSource = DDB1 Type = uint32   Default = {1048601600} } // IS 0 GP 1000 IC 0    OC 25 
                PWMcmd2 			= { DataSource = DDB1 Type = uint32   Default = {1048627200} } // IS 0 GP 1000 IC 0    OC 50 
                PWMcmd3 			= { DataSource = DDB1 Type = uint32   Default = {1048832000} } // IS 0 GP 1000 IC 0    OC 250  
                PWMcmd4 			= { DataSource = DDB1 Type = uint32   Default = {1049088000} } // IS 0 GP 1000 IC 0    OC 500 
                PWMcmd5 			= { DataSource = DDB1 Type = uint32   Default = {1049344000} } // IS 0 GP 1000 IC 0    OC 750
                PWMcmd6 			= { DataSource = DDB1 Type = uint32   Default = {1049548800} } // IS 0 GP 1000 IC 0    OC 950 
                PWMcmd7 			= { DataSource = DDB1 Type = uint32   Default = {1049574400} } // IS 0 GP 1000 IC 0    OC 975
                PWMcmd8 			= { DataSource = DDB1 Type = uint32   Default = {1049344250} } // IS 0 GP 1000 IC 750  OC 250
                */

				PWMcmd1 			= { DataSource = DDB1 Type = uint32   Default = {2097408000} } // IS 0 GP 2000 IC 0    OC 250 
                PWMcmd2 			= { DataSource = DDB1 Type = uint32   Default = {2097664000} } // IS 0 GP 2000 IC 0    OC 100 
                PWMcmd3 			= { DataSource = DDB1 Type = uint32   Default = {2097920000} } // IS 0 GP 2000 IC 0    OC 750  
                PWMcmd4 			= { DataSource = DDB1 Type = uint32   Default = {1049088000} } // IS 0 GP 1000 IC 0    OC 500 
                PWMcmd5 			= { DataSource = DDB1 Type = uint32   Default = {1049344000} } // IS 0 GP 1000 IC 0    OC 750
                PWMcmd6 			= { DataSource = DDB1 Type = uint32   Default = {1049548800} } // IS 0 GP 1000 IC 0    OC 950 
                PWMcmd7 			= { DataSource = DDB1 Type = uint32   Default = {1049574400} } // IS 0 GP 1000 IC 0    OC 975
                PWMcmd8 			= { DataSource = DDB1 Type = uint32   Default = {1049344250} } // IS 0 GP 1000 IC 750  OC 250
                                     
                rfm_in_dummy      = { DataSource = DDB1 Type = uint8      NumberOfElements = 984  }
				wavegen_dummy     = { DataSource = DDB1 Type = float32    NumberOfElements = 62   }
				proc_in_dummy     = { DataSource = DDB1 Type = float32    NumberOfElements = 138  }
 				ethcat1_in_dummy  = { DataSource = DDB1 Type = uint8      NumberOfElements = 80   }			                

                PWMdutyc1   = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Default = 50  }  // Duty cycles (0 .. 0.999)
                
                PWMphasec1  = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Default = 0  }
                PWMphasec3  = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Default = 100  }
                
                PWMphasec2  = { DataSource = DDB1 Type = float32 NumberOfElements = 32 
                Default = { 0, 0, 0, 0, 0, 0, 0, 0,
                			0, 0, 0, 0, 0, 0, 0, 0,
                			0, 0, 0, 0, 0, 0, 0, 0,
                			0, 0, 0, 0, 0, 0, 0, 0}
                			//0, 1, 2, 3, 4, 5, 6, 7}
                			
                }  // Phase delay (0 .. 0.50)
        	}
        }
       
        +WavegenTimeBroker1 = {
         Class = IOGAM
         InputSignals = { Time = { DataSource = DDB1 Type = int32 } }
         OutputSignals = { time = { DataSource = MDSWavegen1 Type = int32 } }
        }                   
        +WavegenBroker1 = {
         Class = IOGAM
         InputSignals = {
           wavegen = { DataSource = MDSWavegen1 Type = float32 NumberOfElements = 4 }
         }
         OutputSignals = {
           wavegen1 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 }
           wavegen2 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 }    
           wavegen3 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 }
           wavegen4 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 }                      
         }
        }
       
        +Conversion1 = {
      		Class = ConversionGAM
 			InputSignals = {
          		wavegen1   = { DataSource = DDB1 Type = float32 }
          		wavegen1_1 = { DataSource = DDB1 Type = float32 Alias = wavegen1 }
          		wavegen1_2 = { DataSource = DDB1 Type = float32 Alias = wavegen1 }
          		wavegen1_3 = { DataSource = DDB1 Type = float32 Alias = wavegen1 }
           
           }
        
        	OutputSignals = {
           		DO1 = { DataSource = DDB1 Type = uint8 Gain = 4 }
   				DO2 = { DataSource = DDB1 Type = uint8 Gain = 3 }
   				DO3 = { DataSource = DDB1 Type = uint8 Gain = 2 }
   				DO4 = { DataSource = DDB1 Type = uint8 Gain = 1 }   				
   			}
 		}
 		
 		+DOsproducer = {
 			Class = IOGAM
 			InputSignals ={
           		DO1 = { DataSource = DDB1 Type = uint8 }
           		DO2 = { DataSource = DDB1 Type = uint8 }
           		DO3 = { DataSource = DDB1 Type = uint8 }
           		DO4 = { DataSource = DDB1 Type = uint8 }		
 			}
 			OutputSignals = {
 				DOs = { DataSource = DDB1 Type = uint8    NumberOfElements = 4    NumberOfDimensions = 1 }
 			}
 		}
 		
 		+PWMduties = {
 			Class = IOGAM
 			InputSignals ={
           		dutyin1  = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }           
           		dutyin2  = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMdutyc1 }           
           		dutyin3  = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }           
           		dutyin4  = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }           
           		dutyin5  = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }           
           		dutyin6  = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }           
           		dutyin7  = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }           
           		dutyin8  = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }
           		           
           		dutyin9  = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }           
           		dutyin10 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }           
           		dutyin11 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }           
           		dutyin12 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }           
           		dutyin13 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }           
           		dutyin14 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }           
           		dutyin15 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }           
           		dutyin16 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }            			
           		
           		dutyin17 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }           
           		dutyin18 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }           
           		dutyin19 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }           
           		dutyin20 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }           
           		dutyin21 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }           
           		dutyin22 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }           
           		dutyin23 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }           
           		dutyin24 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }
           		           
           		dutyin25 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }           
           		dutyin26 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }           
           		dutyin27 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }           
           		dutyin28 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }           
           		dutyin29 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }           
           		dutyin30 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }           
           		dutyin31 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }           
           		dutyin32 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }            			

 			}
 			OutputSignals = {
          		PWMduty   = { DataSource = DDB1 Type = float32 NumberOfElements = 32 }  // Duty cycles (0 .. 0.999)
 			} 		
        }
 		
 		+PWMphases = {
 			Class = IOGAM
 			InputSignals ={
           		//phasein1  = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = wavegen2 }       
           		phasein1  = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }                  		    
           		phasein2  = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }           
           		phasein3  = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }           
           		phasein4  = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }           
           		phasein5  = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }           
           		phasein6  = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }           
           		phasein7  = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }           
           		phasein8  = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }
           		           
           		phasein9  = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }           
           		phasein10 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec3 }           
           		phasein11 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }           
           		phasein12 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }           
           		phasein13 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }           
           		phasein14 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }           
           		phasein15 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }           
           		phasein16 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }            			
           		
           		phasein17 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }           
           		phasein18 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }           
           		phasein19 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }           
           		phasein20 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }           
           		phasein21 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }           
           		phasein22 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }           
           		phasein23 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }           
           		phasein24 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }
           		           
           		phasein25 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }           
           		phasein26 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }           
           		phasein27 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }           
           		phasein28 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }           
           		phasein29 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }           
           		phasein30 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }           
           		phasein31 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }           
           		phasein32 = { DataSource = DDB1 Type = float32 NumberOfElements = 1 Alias = PWMphasec1 }            			

 			}
 			OutputSignals = {
          		PWMphase   = { DataSource = DDB1 Type = float32 NumberOfElements = 32 }  // Duty cycles (0 .. 0.999)
 			} 		
        }
 		
 		
        +PWMcommands = {
         Class = SPCPWMConversionGAM
         GlobalPeriods = { 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
         				   1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
         				   1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
         				   1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, } // Compulsory, PWM periods, see ACQ2106N02OUT DataSource
         Reversed =      { 0, 0, 0, 0, 0, 0, 0, 0,
         				   0, 0, 0, 0, 0, 0, 0, 0,
         				   0, 0, 0, 0, 0, 0, 0, 0,
         				   0, 0, 0, 0, 0, 0, 0, 0}
         
         InputSignals = {
          PWMduty   = { DataSource = DDB1 Type = float32 NumberOfElements = 32 }  // Duty cycles (0 .. 0.999)
          PWMphase  = { DataSource = DDB1 Type = float32 NumberOfElements = 32 }  // Phase delay (0 .. 0.50)
         }
         OutputSignals = {
          PWM_IS    = { DataSource = DDB1 Type = uint8 NumberOfElements = 32 }
          PWM_GP    = { DataSource = DDB1 Type = uint16 NumberOfElements = 32 }
          PWM_OC    = { DataSource = DDB1 Type = uint16 NumberOfElements = 32 }
          PWM_IC    = { DataSource = DDB1 Type = uint16 NumberOfElements = 32 }
          PWMcmdv    = { DataSource = DDB1 Type = uint32 NumberOfElements = 32 }   // PWM configuration buffer according to ACQ2106N02OUT DataSource
         }
        }
 		 		            
    	+TimingSignalsBroker = {
         Class = IOGAM
         InputSignals = { 
         	Thread1_CycleTime    			= { DataSource = Timings Type = uint32 Alias = Run.Thread1_CycleTime } 
	        
	        ADCBroker_ReadTime    			= { DataSource = Timings Type = uint32 Default = 0 } 	        
	        ADCBroker_ExecTime    			= { DataSource = Timings Type = uint32 Default = 0 } 
	        ADCBroker_WriteTime    			= { DataSource = Timings Type = uint32 Default = 0 }    
	        WavegenTimeBroker1_ReadTime   	= { DataSource = Timings Type = uint32 Default = 0 } 
	        WavegenTimeBroker1_ExecTime   	= { DataSource = Timings Type = uint32 Default = 0 } 
	        WavegenTimeBroker1_WriteTime  	= { DataSource = Timings Type = uint32 Default = 0 } 
	        WavegenTimeBroker2_ReadTime 	= { DataSource = Timings Type = uint32 Default = 0 } 	
	        WavegenTimeBroker2_ExecTime 	= { DataSource = Timings Type = uint32 Default = 0 } 
	        WavegenTimeBroker2_WriteTime	= { DataSource = Timings Type = uint32 Default = 0 } 
	        WavegenBroker1_ReadTime 		= { DataSource = Timings Type = uint32 Default = 0 }	
	        WavegenBroker1_ExecTime 		= { DataSource = Timings Type = uint32 Default = 0 }
	        WavegenBroker1_WriteTime		= { DataSource = Timings Type = uint32 Default = 0 }
	        WavegenBroker2_ReadTime 		= { DataSource = Timings Type = uint32 Default = 0 } 	       	         
	        WavegenBroker2_ExecTime 		= { DataSource = Timings Type = uint32 Default = 0 } 
	        WavegenBroker2_WriteTime		= { DataSource = Timings Type = uint32 Default = 0 } 
	        TestSignals1_ReadTime    		= { DataSource = Timings Type = uint32 Default = 0 } 	       	       
	        TestSignals1_ExecTime    		= { DataSource = Timings Type = uint32 Default = 0 } 
	        TestSignals1_WriteTime   		= { DataSource = Timings Type = uint32 Default = 0 }
	        RFMOutputBroker_ReadTime 		= { DataSource = Timings Type = uint32 Default = 0 } 	       
	        RFMOutputBroker_ExecTime 		= { DataSource = Timings Type = uint32 Default = 0 } 
	        RFMOutputBroker_WriteTime		= { DataSource = Timings Type = uint32 Default = 0 } 
	        RFMInputBroker_ReadTime         = { DataSource = Timings Type = uint32 Default = 0 } 
	        RFMInputBroker_ExecTime         = { DataSource = Timings Type = uint32 Default = 0 } 
	        RFMInputBroker_WriteTime        = { DataSource = Timings Type = uint32 Default = 0 } 
	        GAMSimulink_ReadTime  			= { DataSource = Timings Type = uint32 Default = 0 } 
	        GAMSimulink_ExecTime  			= { DataSource = Timings Type = uint32 Default = 0 }  
	        GAMSimulink_WriteTime 			= { DataSource = Timings Type = uint32 Default = 0 } 
	        DACBroker_ReadTime 				= { DataSource = Timings Type = uint32 Default = 0 } 	       	        
	        DACBroker_ExecTime 				= { DataSource = Timings Type = uint32 Default = 0 } 
	        DACBroker_WriteTime				= { DataSource = Timings Type = uint32 Default = 0 } 
	        StorageBroker1_ReadTime        	= { DataSource = Timings Type = uint32 Default = 0 } 	       
	        StorageBroker1_ExecTime        	= { DataSource = Timings Type = uint32 Default = 0 } 
	        StorageBroker1_WriteTime       	= { DataSource = Timings Type = uint32 Default = 0 } 
	        LoggerBroker_ReadTime  			= { DataSource = Timings Type = uint32 Default = 0 } 
	        LoggerBroker_ExecTime  			= { DataSource = Timings Type = uint32 Default = 0 } 
	        LoggerBroker_WriteTime 			= { DataSource = Timings Type = uint32 Default = 0 } 
                                                                                   
         }
         OutputSignals = { 
         	Thread1_CycleTime    			= { DataSource = DDB1 Type = uint32 Default = 0 }     
	        ADCBroker_Time    				= { DataSource = DDB1 Type = uint32 NumberOfElements = 3 } 	        
	        WavegenTimeBroker1_Time   		= { DataSource = DDB1 Type = uint32 NumberOfElements = 3 } 
	        WavegenTimeBroker2_Time 		= { DataSource = DDB1 Type = uint32 NumberOfElements = 3 } 	
	        WavegenBroker1_Time 			= { DataSource = DDB1 Type = uint32 NumberOfElements = 3 }	
	        WavegenBroker2_Time 			= { DataSource = DDB1 Type = uint32 NumberOfElements = 3 } 	       	         
	        TestSignals1_Time    			= { DataSource = DDB1 Type = uint32 NumberOfElements = 3 } 	       	       
	        RFMOutputBroker_Time 			= { DataSource = DDB1 Type = uint32 NumberOfElements = 3 } 	       
	        RFMInputBroker_Time         	= { DataSource = DDB1 Type = uint32 NumberOfElements = 3 } 
	        GAMSimulink1_Time  				= { DataSource = DDB1 Type = uint32 NumberOfElements = 3 } 
	        DACBroker_Time 					= { DataSource = DDB1 Type = uint32 NumberOfElements = 3 } 	       	        
	        StorageBroker1_Time        		= { DataSource = DDB1 Type = uint32 NumberOfElements = 3 } 	       
	        LoggerBroker_Time  				= { DataSource = DDB1 Type = uint32 NumberOfElements = 3 } 
         }                                                  
        }                                                   
    	                                                    
    	+DACBroker = {
        	Class = IOGAM
            InputSignals = {
				dac        = {		   DataSource = DDB1 Type = int16 NumberOfElements = 64 NumberOfDimensions = 1 }
				DOs        = {         DataSource = DDB1 Type = uint8 NumberOfElements = 4 NumberOfDimensions = 1 }        	
        		PWMcmd    = {         DataSource = DDB1  Type = uint32 NumberOfElements = 32 NumberOfDimensions = 1 Alias = PWMcmdv }
        	}
        	OutputSignals  = {
				DACoutputs = {		   DataSource = DACSystem Type = int16 NumberOfElements = 64 NumberOfDimensions = 1 }
				DOs        = {         DataSource = DACSystem Type = uint8 NumberOfElements = 4 NumberOfDimensions = 1 }        	
        		PWMcmd    = {         DataSource = DACSystem Type = uint32 NumberOfElements = 32 NumberOfDimensions = 1  }        	
        	}
        }
    			
		+StorageBroker1 = {
		 Class = IOGAM
		 InputSignals = {	  
		    triggerforMDS = { DataSource = DDB1 Type = uint8 }
		    offsettimeforMDS = { DataSource = DDB1 Type = int32 } 
          
			Time 							= { DataSource = DDB1 Type = int32 }
			realtime                        = { DataSource = DDB1 Type = float32 } 
			ADCuscounter 					= { DataSource = DDB1  Type = uint32 Default = 0 }

         	Thread1_CycleTime    			= { DataSource = DDB1 Type = uint32 Default = 0 }
	        ADCBroker_Time    				= { DataSource = DDB1 Type = uint32 NumberOfElements = 3 } 	        
	        WavegenTimeBroker1_Time   		= { DataSource = DDB1 Type = uint32 NumberOfElements = 3 } 
	        WavegenTimeBroker2_Time 		= { DataSource = DDB1 Type = uint32 NumberOfElements = 3 } 	
	        WavegenBroker1_Time 			= { DataSource = DDB1 Type = uint32 NumberOfElements = 3 }	
	        WavegenBroker2_Time 			= { DataSource = DDB1 Type = uint32 NumberOfElements = 3 } 	       	         
	        TestSignals1_Time    			= { DataSource = DDB1 Type = uint32 NumberOfElements = 3 } 	       	       
	        RFMOutputBroker_Time 			= { DataSource = DDB1 Type = uint32 NumberOfElements = 3 } 	       
	        RFMInputBroker_Time         	= { DataSource = DDB1 Type = uint32 NumberOfElements = 3 } 
	        GAMSimulink1_Time  				= { DataSource = DDB1 Type = uint32 NumberOfElements = 3 } 
	        DACBroker_Time 					= { DataSource = DDB1 Type = uint32 NumberOfElements = 3 } 	       	        
	        StorageBroker1_Time        		= { DataSource = DDB1 Type = uint32 NumberOfElements = 3 } 	       
	        LoggerBroker_Time  				= { DataSource = DDB1 Type = uint32 NumberOfElements = 3 }
					
			wavegen1						= { DataSource = DDB1 Type = float32 }
			wavegen2						= { DataSource = DDB1 Type = float32 }
			wavegen3						= { DataSource = DDB1 Type = float32 }
			wavegen4						= { DataSource = DDB1 Type = float32 }
			
			
			//realadc							= { DataSource = DDB1 Type = int16 Ranges = {{32,32}} } 		 		 
		 	DOs = { DataSource = DDB1 Type = uint8    NumberOfElements = 4    NumberOfDimensions = 1 }

            PWM_IS     = { DataSource = DDB1 Type = uint8   }
            PWM_GP     = { DataSource = DDB1 Type = uint16  }
            PWM_OC     = { DataSource = DDB1 Type = uint16  }
            PWM_IC     = { DataSource = DDB1 Type = uint16  }
            PWMcmdv    = { DataSource = DDB1 Type = uint32  }   // PWM configuration buffer according to ACQ2106N02OUT DataSource
 

		 }
		 OutputSignals = {
		  Trigger = { DataSource = MDSWriter Type = uint8 }
		  Time = { DataSource = MDSWriter Type = int32 }
                    		  		  
		  sysinttime 						= { DataSource = MDSWriter Type = int32 }
		  sysrealtime 						= { DataSource = MDSWriter Type = float32 } 		  		 
		  adcinttime                        = { DataSource = MDSWriter Type = uint32 }

          Thread1_CycleTime    				= { DataSource = MDSWriter Type = uint32 Default = 0 }
	      ADCBroker_Time    				= { DataSource = MDSWriter Type = uint32 NumberOfElements = 3 } 	        
	      WavegenTimeBroker1_Time   		= { DataSource = MDSWriter Type = uint32 NumberOfElements = 3 } 
	      WavegenTimeBroker2_Time 			= { DataSource = MDSWriter Type = uint32 NumberOfElements = 3 } 	
	      WavegenBroker1_Time 				= { DataSource = MDSWriter Type = uint32 NumberOfElements = 3 }	
	      WavegenBroker2_Time 				= { DataSource = MDSWriter Type = uint32 NumberOfElements = 3 } 	       	         
	      TestSignals1_Time    				= { DataSource = MDSWriter Type = uint32 NumberOfElements = 3 } 	       	       
	      RFMOutputBroker_Time 				= { DataSource = MDSWriter Type = uint32 NumberOfElements = 3 } 	       
	      RFMInputBroker_Time         		= { DataSource = MDSWriter Type = uint32 NumberOfElements = 3 } 
	      GAMSimulink1_Time  				= { DataSource = MDSWriter Type = uint32 NumberOfElements = 3 } 
	      DACBroker_Time 					= { DataSource = MDSWriter Type = uint32 NumberOfElements = 3 } 	       	        
	      StorageBroker1_Time        		= { DataSource = MDSWriter Type = uint32 NumberOfElements = 3 } 	       
	      LoggerBroker_Time  				= { DataSource = MDSWriter Type = uint32 NumberOfElements = 3 }
	
		  wavegen1    						= { DataSource = MDSWriter Type = float32 } 
		  wavegen2    						= { DataSource = MDSWriter Type = float32 } 
		  wavegen3    						= { DataSource = MDSWriter Type = float32 } 
		  wavegen4    						= { DataSource = MDSWriter Type = float32 } 
		 	  
		  //adcch32     						= { DataSource = MDSWriter Type = int16 } 
		  DOs = { DataSource = MDSWriter Type = uint8    NumberOfElements = 4    NumberOfDimensions = 1 }
		  
            PWM_IS     = { DataSource = MDSWriter Type = uint8  }
            PWM_GP     = { DataSource = MDSWriter Type = uint16 }
            PWM_OC     = { DataSource = MDSWriter Type = uint16 }
            PWM_IC     = { DataSource = MDSWriter Type = uint16 }
            PWMcmdv    = { DataSource = MDSWriter Type = uint32 }   // PWM configuration buffer according to ACQ2106N02OUT DataSource
 		  		
//		  st   			= { DataSource = MDSWriter Type = uint32  NumberOfElements = 39 NumberOfDimensions = 1 }
		 }
		}
			
		+LoggerBroker = {
		 Class = IOGAM
		 InputSignals = {
		 	Counter = 	{ DataSource = DDB1 Type = int32 }
		 	Time    = 		{ DataSource = DDB1 Type = int32 }
		 	realtime = 		{ DataSource = DDB1 Type = float32 }
		 }
		 OutputSignals =
		 {
		    Counter = 	{ DataSource = LoggerDataSource Type = int32 }
		    Time    = 		{ DataSource = LoggerDataSource Type = int32 }
		    realtime = 		{ DataSource = LoggerDataSource Type = float32 }
		 }
		} 
		
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        
        +DDB1 = {
            Class = GAMDataSource
       	}
       	
        +LoggerDataSource = {
            Class = LoggerDataSource
        }  
            
        +Timings = {
            Class = TimingDataSource
        }       
                 
        +ADCSystem = {
 	    	Class = AFHBA404::ACQ2106N02IN
			Device = 0 // Userspace device entry to be opened
			// TODO: IndependentThread isn't working, thread semaphore not handled by Execute, to be fixed
			//ExecutionMode = RealTimeThread //Optional. If not set ExecutionMode = IndependentThread. If ExecutionMode == IndependentThread a thread is spawned to generate the time events. ExecutionMode == RealTimeThread the time is generated in the context of the real-time thread.
		    ExecutionMode = IndependentThread //Optional. If not set ExecutionMode = IndependentThread. If ExecutionMode == IndependentThread a thread is spawned to generate the time events. ExecutionMode == RealTimeThread the time is generated in the context of the real-time thread.			
			CPUMask = 0x04 //Optional and only relevant if ExecutionMode=IndependentThread
     		Cycles = 50000
     		StartTimeUsec = 0
     		Frequency = 50000
     		// This script is called upon entering run state, after having put the ADC in LLC mode
     		// it arms the ADC system end enters a wait trigger state
     		// CAUTION: in reprocessing the soft-trigger comes too early, for now
     		// arming must be done externally w.r.t. MARTe and the following line commented out
     		// CAUTION: the number of transient samples (samples after which the ADC goes back in idle state) is set in this script
     		RunScript = "/root/scd/commands/arm-ADC" 
     		EndrunScript = "/root/scd/commands/checkstop-ADC"
     		Signals = {
         		Counter = { // the sample counter maintained by the ADC subsystem
             		Type = int32
         		}
         		Time = {    // the realtime maintained by the ADC subsystem, units [us]
             		Type = int32
             		Frequency = 50000
         		}
         		ADCuscounter = { // the us cycle counter maintained by the ADC, useful to debug ADC clocking issues
         		    Type = uint32
         		}
         		ADCinputs = { // ADC inputs vector
             		Type = int16
             		NumberOfElements = 192
         		}
         	}
         	+TermMessage1 = { Class=Message Destination=StateMachine Function=RUNCOMPLETE }
     	}    
  		
        +DACSystem = {
 	    	Class = AFHBA404::ACQ2106N02OUT
			Device = 1 // Userspace device entry to be opened
			ExecutionMode = RealTimeThread // Only this mode is supported here
		    Signals = {
		         DACoutputs = { // DAC outputs vector
		             Type = int16
		             NumberOfElements = 64
		         }
		         DOs = { // DO outputs vector
		             Type = uint8
		             NumberOfElements = 4
		         }
		         PWMcmd = { // Duty cycle of PWM generators
		             Type = uint32
		             NumberOfElements = 32
		         }
		    }
     	}   

		+MDSWavegen1 = {
		 Class = MDSObjWavegen
		 Shot = 10
		 Frequency = 50000.00
		 Server=tcvscd.crpp.tcv
		 Tree=rtctst
		 Verbosity = 0
		 Interpolation = 1
		 TimeOffset = 0.000
		 +ref1                                   = { Class=MDSWgSigSingle                 Path="ref1"                   }		 		 		 
		 +ref2                                   = { Class=MDSWgSigSingle                 Path="ref2"                   }		 		 		 
		 +ref3                                   = { Class=MDSWgSigSingle                 Path="ref3"                   }		 		 		 
		 +ref4                                   = { Class=MDSWgSigSingle                 Path="ref4"                   }		 		 		 
		 Signals = {
		   time = { Type = int32 }
		   wavegen = { Type = float32 NumberOfElements = 4 NumberOfDimensions = 1 }	 
		 }	
		} 
		
        +MDSWriter = {
        	Class = MDSWriter
			NumberOfBuffers = 100000
        	CPUMask = 0x10
        	StackSize = 10000000
        	TreeName = "rtc"
        	StoreOnTrigger = 1
        	Verbosity = 1
                
        	// Undefined, OpenTree is deferred, it is performed in response to a specific message sent by the ShotManager
        	// this is necessary because we need a late opening to have simulink buses configured
        	// the shotno is the parameter of the opening message
        	PulseNumber = -2 
          	
        	EventName = "updatejScope"
        	TimeRefresh = 5
        	NumberOfPreTriggers = 0
			NumberOfPostTriggers = 0
		
			Signals = {
				Trigger 					= { Type = uint8 }	
			    Time    					= { Type = int32 TimeSignal = 1 TimeSignalMultiplier = 1e-6 }
  
				// General system timing
		  		sysinttime 					= { NodeName = "TCVRT02.STATS.STAT_001:RAW" 	 	 Period = 0.00002  MakeSegmentAfterNWrites = 120000 AutomaticSegmentation = 0 NumberOfElements = 1 SamplePhase = 0 SignalName = "" } // With empty SignalName the name is taken from MARTe2 signal name automatically    	
		  		sysrealtime 				= { NodeName = "TCVRT02.STATS.STAT_002:RAW" 	 	 Period = 0.00002  MakeSegmentAfterNWrites = 120000 AutomaticSegmentation = 0 NumberOfElements = 1 SamplePhase = 0 SignalName = "" }    	 		  		 
		  		adcinttime 					= { NodeName = "TCVRT02.STATS.STAT_003:RAW" 	 	 Period = 0.00002  MakeSegmentAfterNWrites = 120000 AutomaticSegmentation = 0 NumberOfElements = 1 SamplePhase = 0 SignalName = "" }    	 		  		 

				// General thread timing
				Thread1_CycleTime    		= { NodeName = "TCVRT02.THREAD01.STATS.STAT_001:RAW" 	 	 Period = 0.00002  MakeSegmentAfterNWrites = 120000 AutomaticSegmentation = 0 NumberOfElements = 1 SamplePhase = 0 SignalName = "" } 

				// Hardware related inputs timings
				ADCBroker_Time    			= { NodeName = "TCVRT02.THREAD01.STATS.STAT_010:RAW" 	 	 Period = 0.00002  MakeSegmentAfterNWrites = 120000 AutomaticSegmentation = 0 NumberOfElements = 3 SamplePhase = 0 SignalName = "" } 
				RFMInputBroker_Time         = { NodeName = "TCVRT02.THREAD01.STATS.STAT_011:RAW" 	 	 Period = 0.00002  MakeSegmentAfterNWrites = 120000 AutomaticSegmentation = 0 NumberOfElements = 3 SamplePhase = 0 SignalName = "" } 

				// Wavegens timings
				WavegenTimeBroker1_Time   	= { NodeName = "TCVRT02.THREAD01.STATS.STAT_020:RAW" 	 	 Period = 0.00002  MakeSegmentAfterNWrites = 120000 AutomaticSegmentation = 0 NumberOfElements = 3 SamplePhase = 0 SignalName = "" } 
				WavegenTimeBroker2_Time 	= { NodeName = "TCVRT02.THREAD01.STATS.STAT_021:RAW" 	 	 Period = 0.00002  MakeSegmentAfterNWrites = 120000 AutomaticSegmentation = 0 NumberOfElements = 3 SamplePhase = 0 SignalName = "" } 
				WavegenBroker1_Time 		= { NodeName = "TCVRT02.THREAD01.STATS.STAT_022:RAW" 	 	 Period = 0.00002  MakeSegmentAfterNWrites = 120000 AutomaticSegmentation = 0 NumberOfElements = 3 SamplePhase = 0 SignalName = "" } 
				WavegenBroker2_Time 		= { NodeName = "TCVRT02.THREAD01.STATS.STAT_023:RAW" 	 	 Period = 0.00002  MakeSegmentAfterNWrites = 120000 AutomaticSegmentation = 0 NumberOfElements = 3 SamplePhase = 0 SignalName = "" } 
				
				// Housekeeping timings
				TestSignals1_Time    		= { NodeName = "TCVRT02.THREAD01.STATS.STAT_030:RAW" 	 	 Period = 0.00002  MakeSegmentAfterNWrites = 120000 AutomaticSegmentation = 0 NumberOfElements = 3 SamplePhase = 0 SignalName = "" } 
				
				// Inter thread communications timings
								
				// Computational (Simulink) time
				GAMSimulink1_Time  			= { NodeName = "TCVRT02.THREAD01.STATS.STAT_050:RAW" 	 	 Period = 0.00002  MakeSegmentAfterNWrites = 120000 AutomaticSegmentation = 0 NumberOfElements = 3 SamplePhase = 0 SignalName = "" }				
				
				// Hardware outputs timings
				RFMOutputBroker_Time 		= { NodeName = "TCVRT02.THREAD01.STATS.STAT_080:RAW" 	 	 Period = 0.00002  MakeSegmentAfterNWrites = 120000 AutomaticSegmentation = 0 NumberOfElements = 3 SamplePhase = 0 SignalName = "" } 
				DACBroker_Time 				= { NodeName = "TCVRT02.THREAD01.STATS.STAT_081:RAW" 	 	 Period = 0.00002  MakeSegmentAfterNWrites = 120000 AutomaticSegmentation = 0 NumberOfElements = 3 SamplePhase = 0 SignalName = "" }
				
				// Data handling timings
				StorageBroker1_Time        	= { NodeName = "TCVRT02.THREAD01.STATS.STAT_090:RAW" 	 	 Period = 0.00002  MakeSegmentAfterNWrites = 120000 AutomaticSegmentation = 0 NumberOfElements = 3 SamplePhase = 0 SignalName = "" }
				LoggerBroker_Time  			= { NodeName = "TCVRT02.THREAD01.STATS.STAT_091:RAW" 	 	 Period = 0.00002  MakeSegmentAfterNWrites = 120000 AutomaticSegmentation = 0 NumberOfElements = 3 SamplePhase = 0 SignalName = "" }

				// Test signal
		  		wavegen1 					= { NodeName = "TCVRT02.STATS.STAT_050:RAW" 	   	  Period = 0.00002  MakeSegmentAfterNWrites = 120000 AutomaticSegmentation = 0 NumberOfElements = 1 SamplePhase = 0 SignalName = "" }    	 		  		 
				wavegen2     				= { NodeName = "TCVRT02.STATS.STAT_051:RAW" 	      Period = 0.00002  MakeSegmentAfterNWrites = 120000 AutomaticSegmentation = 0 NumberOfElements = 1 SamplePhase = 0 SignalName = "" } 
				wavegen3     				= { NodeName = "TCVRT02.STATS.STAT_052:RAW" 	      Period = 0.00002  MakeSegmentAfterNWrites = 120000 AutomaticSegmentation = 0 NumberOfElements = 1 SamplePhase = 0 SignalName = "" } 
				wavegen4     				= { NodeName = "TCVRT02.STATS.STAT_053:RAW" 	      Period = 0.00002  MakeSegmentAfterNWrites = 120000 AutomaticSegmentation = 0 NumberOfElements = 1 SamplePhase = 0 SignalName = "" } 
				
				DOs 						= { NodeName = "TCVRT02.STATS.STAT_055:RAW" 	      Period = 0.00002  MakeSegmentAfterNWrites = 120000 AutomaticSegmentation = 0 NumberOfElements = 4 SamplePhase = 0 SignalName = "" } 

            PWM_IS     = { NodeName = "TCVRT02.STATS.STAT_060:RAW" 	   	  Period = 0.00002  MakeSegmentAfterNWrites = 120000 AutomaticSegmentation = 0 NumberOfElements = 32 SamplePhase = 0 SignalName = "" }
            PWM_GP     = { NodeName = "TCVRT02.STATS.STAT_061:RAW" 	   	  Period = 0.00002  MakeSegmentAfterNWrites = 120000 AutomaticSegmentation = 0 NumberOfElements = 32 SamplePhase = 0 SignalName = "" }
            PWM_OC     = { NodeName = "TCVRT02.STATS.STAT_062:RAW" 	   	  Period = 0.00002  MakeSegmentAfterNWrites = 120000 AutomaticSegmentation = 0 NumberOfElements = 32 SamplePhase = 0 SignalName = "" }
            PWM_IC     = { NodeName = "TCVRT02.STATS.STAT_063:RAW" 	   	  Period = 0.00002  MakeSegmentAfterNWrites = 120000 AutomaticSegmentation = 0 NumberOfElements = 32 SamplePhase = 0 SignalName = "" }
            PWMcmdv    = { NodeName = "TCVRT02.STATS.STAT_064:RAW" 	   	  Period = 0.00002  MakeSegmentAfterNWrites = 120000 AutomaticSegmentation = 0 NumberOfElements = 32 SamplePhase = 0 SignalName = "" }
 
				
				//st      	= { NodeName = "TCVRT02.STATS.STAT_%03d" 	    	 Period = 0.00002  MakeSegmentAfterNWrites = 120000 AutomaticSegmentation = 0 NumberOfElements = 39 SamplePhase = 0 Indexed = 1 } // Plain indexed entry (no multidimensional signal supported!)    	
        	}
        	+TreeFlushedMsg = { Class = Message Destination = ShotManager Function = TreeFlushed Mode = ExpectsReply }
        }
        
        
                      
    }
    +States = {
        Class = ReferenceContainer
        +Run = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread CPUs = 0x02 Functions = {
                      ADCBroker 
                      WavegenTimeBroker1 
                      WavegenBroker1 
                      TimeSignals 
                      Constants
                      Conversion1
                      DOsproducer
                      PWMduties
                      PWMphases
                      PWMcommands
                      DACBroker 
                      TimingSignalsBroker
                      StorageBroker1
                      //LoggerBroker
                      }                                
                }
            }
        }
                
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
